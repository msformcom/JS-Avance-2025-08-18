import{EMPTY}from"./observable/empty";import{of}from"./observable/of";import{throwError}from"./observable/throwError";import{isFunction}from"./util/isFunction";var NotificationKind;(i=>{i.NEXT="N",i.ERROR="E",i.COMPLETE="C"})(NotificationKind=NotificationKind||{});class Notification{constructor(i,t,o){this.kind=i,this.value=t,this.error=o,this.hasValue="N"===i}observe(i){return observeNotification(this,i)}do(i,t,o){var{kind:r,value:e,error:n}=this;return"N"===r?i?.(e):"E"===r?t?.(n):o?.()}accept(i,t,o){return isFunction(i?.next)?this.observe(i):this.do(i,t,o)}toObservable(){let{kind:i,value:t,error:o}=this;var r="N"===i?of(t):"E"===i?throwError(()=>o):"C"===i?EMPTY:0;if(r)return r;throw new TypeError("Unexpected notification kind "+i)}static createNext(i){return new Notification("N",i)}static createError(i){return new Notification("E",void 0,i)}static createComplete(){return Notification.completeNotification}}function observeNotification(i,t){var{kind:i,value:o,error:r}=i;if("string"!=typeof i)throw new TypeError('Invalid notification, missing "kind"');"N"===i?t.next?.(o):"E"===i?t.error?.(r):t.complete?.()}Notification.completeNotification=new Notification("C");export{NotificationKind,Notification,observeNotification};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
