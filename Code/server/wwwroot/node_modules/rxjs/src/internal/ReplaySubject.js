import{Subject}from"./Subject";import{dateTimestampProvider}from"./scheduler/dateTimestampProvider";class ReplaySubject extends Subject{constructor(e=1/0,i=1/0,t=dateTimestampProvider){super(),this._bufferSize=e,this._windowTime=i,this._timestampProvider=t,this._buffer=[],this._infiniteTimeWindow=!0,this._infiniteTimeWindow=i===1/0,this._bufferSize=Math.max(1,e),this._windowTime=Math.max(1,i)}next(e){var{isStopped:i,_buffer:t,_infiniteTimeWindow:r,_timestampProvider:s,_windowTime:n}=this;i||(t.push(e),r)||t.push(s.now()+n),this._trimBuffer(),super.next(e)}_subscribe(i){this._throwIfClosed(),this._trimBuffer();var e=this._innerSubscribe(i),{_infiniteTimeWindow:t,_buffer:r}=this,s=r.slice();for(let e=0;e<s.length&&!i.closed;e+=t?1:2)i.next(s[e]);return this._checkFinalizedStatuses(i),e}_trimBuffer(){var{_bufferSize:e,_timestampProvider:t,_buffer:r,_infiniteTimeWindow:i}=this,s=(i?1:2)*e;if(e<1/0&&s<r.length&&r.splice(0,r.length-s),!i){var n=t.now();let i=0;for(let e=1;e<r.length&&r[e]<=n;e+=2)i=e;i&&r.splice(0,i+1)}}}export{ReplaySubject};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
