import{Subject,AnonymousSubject}from"../../Subject";import{Subscriber}from"../../Subscriber";import{Observable}from"../../Observable";import{Subscription}from"../../Subscription";import{ReplaySubject}from"../../ReplaySubject";let DEFAULT_WEBSOCKET_CONFIG={url:"",deserializer:e=>JSON.parse(e.data),serializer:e=>JSON.stringify(e)},WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT="WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }";class WebSocketSubject extends AnonymousSubject{constructor(e,t){if(super(),this._socket=null,e instanceof Observable)this.destination=t,this.source=e;else{var r=this._config={...DEFAULT_WEBSOCKET_CONFIG};if(this._output=new Subject,"string"==typeof e)r.url=e;else for(var s in e)e.hasOwnProperty(s)&&(r[s]=e[s]);if(!r.WebSocketCtor&&WebSocket)r.WebSocketCtor=WebSocket;else if(!r.WebSocketCtor)throw new Error("no WebSocket constructor can be found");this.destination=new ReplaySubject}}lift(e){var t=new WebSocketSubject(this._config,this.destination);return t.operator=e,t.source=this,t}_resetState(){this._socket=null,this.source||(this.destination=new ReplaySubject),this._output=new Subject}multiplex(r,s,o){let i=this;return new Observable(t=>{try{i.next(r())}catch(e){t.error(e)}let e=i.subscribe({next:e=>{try{o(e)&&t.next(e)}catch(e){t.error(e)}},error:e=>t.error(e),complete:()=>t.complete()});return()=>{try{i.next(s())}catch(e){t.error(e)}e.unsubscribe()}})}_connectSocket(){var{WebSocketCtor:e,protocol:t,url:r,binaryType:s}=this._config;let o=this._output,i=null;try{i=t?new e(r,t):new e(r),this._socket=i,s&&(this._socket.binaryType=s)}catch(e){return void o.error(e)}let c=new Subscription(()=>{this._socket=null,i&&1===i.readyState&&i.close()});i.onopen=e=>{var t=this._socket;t?(t=this._config.openObserver,t&&t.next(e),t=this.destination,this.destination=Subscriber.create(e=>{if(1===i.readyState)try{var t=this._config.serializer;i.send(t(e))}catch(e){this.destination.error(e)}},e=>{var t=this._config.closingObserver;t&&t.next(void 0),e&&e.code?i.close(e.code,e.reason):o.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT)),this._resetState()},()=>{var e=this._config.closingObserver;e&&e.next(void 0),i.close(),this._resetState()}),t&&t instanceof ReplaySubject&&c.add(t.subscribe(this.destination))):(i.close(),this._resetState())},i.onerror=e=>{this._resetState(),o.error(e)},i.onclose=e=>{i===this._socket&&this._resetState();var t=this._config.closeObserver;t&&t.next(e),e.wasClean?o.complete():o.error(e)},i.onmessage=e=>{try{var t=this._config.deserializer;o.next(t(e))}catch(e){o.error(e)}}}_subscribe(e){var t=this.source;return t?t.subscribe(e):(this._socket||this._connectSocket(),this._output.subscribe(e),e.add(()=>{var e=this._socket;0===this._output.observers.length&&(!e||1!==e.readyState&&0!==e.readyState||e.close(),this._resetState())}),e)}unsubscribe(){var e=this._socket;!e||1!==e.readyState&&0!==e.readyState||e.close(),this._resetState(),super.unsubscribe()}}export{WebSocketSubject};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
