import{Observable}from"../Observable";import{innerFrom}from"./innerFrom";import{argsOrArgArray}from"../util/argsOrArgArray";import{createOperatorSubscriber}from"../operators/OperatorSubscriber";function race(...r){return 1===(r=argsOrArgArray(r)).length?innerFrom(r[0]):new Observable(raceInit(r))}function raceInit(r){return t=>{let n=[];for(let e=0;n&&!t.closed&&e<r.length;e++)n.push(innerFrom(r[e]).subscribe(createOperatorSubscriber(t,r=>{if(n){for(let r=0;r<n.length;r++)r!==e&&n[r].unsubscribe();n=null}t.next(r)})))}}export{race,raceInit};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2UudHMiXSwibmFtZXMiOlsiT2JzZXJ2YWJsZSIsImlubmVyRnJvbSIsImFyZ3NPckFyZ0FycmF5IiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwicmFjZSIsInNvdXJjZXMiLCJsZW5ndGgiLCJyYWNlSW5pdCIsImxldCIsInN1YnNjcmlwdGlvbnMiLCJpIiwic3Vic2NyaWJlciIsImNsb3NlZCIsInB1c2giLCJzdWJzY3JpYmUiLCJzIiwidW5zdWJzY3JpYmUiLCJuZXh0IiwidmFsdWUiXSwibWFwcGluZ3MiOiJPQUFTQSxVQUFpQyxLQUFmLHVCQUNsQkMsU0FBOEIsS0FBYixxQkFHakJDLGNBQThDLEtBQXhCLGdDQUN0QkMsd0JBQWlFLEtBQWpDLGtDQTZDbkMsU0FBVUMsUUFBV0MsR0FHekIsT0FBMEIsS0FGMUJBLEVBQVVILGVBQWVHLENBQU8sR0FFakJDLE9BQWVMLFVBQVVJLEVBQVEsRUFBd0IsRUFBSSxJQUFJTCxXQUFjTyxTQUFTRixDQUErQixDQUFDLENBQ3pJLENBT00sU0FBVUUsU0FBWUYsR0FDMUIsT0FBTyxJQUNMRyxJQUFJQyxFQUFnQyxHQU1wQyxJQUFLRCxJQUFJRSxFQUFJLEVBQUdELEdBQWlCLENBQUNFLEVBQVdDLFFBQVVGLEVBQUlMLEVBQVFDLE9BQVFJLENBQUMsR0FDMUVELEVBQWNJLEtBQ1paLFVBQVVJLEVBQVFLLEVBQXdCLEVBQUVJLFVBQzFDWCx5QkFBeUJRLEVBQVksSUFDbkMsR0FBSUYsRUFBZSxDQUdqQixJQUFLRCxJQUFJTyxFQUFJLEVBQUdBLEVBQUlOLEVBQWNILE9BQVFTLENBQUMsR0FDekNBLElBQU1MLEdBQUtELEVBQWNNLEdBQUdDLFlBQVcsRUFFekNQLEVBQWdCLElBQ2xCLENBQ0FFLEVBQVdNLEtBQUtDLENBQUssQ0FDdkIsQ0FBQyxDQUFDLENBQ0gsQ0FHUCxDQUNGLFFBckNnQmQsS0FXQUcsUUEwQmhCIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUlucHV0LCBPYnNlcnZhYmxlSW5wdXRUdXBsZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGFyZ3NPckFyZ0FycmF5IH0gZnJvbSAnLi4vdXRpbC9hcmdzT3JBcmdBcnJheSc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2U8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXT4oaW5wdXRzOiBbLi4uT2JzZXJ2YWJsZUlucHV0VHVwbGU8VD5dKTogT2JzZXJ2YWJsZTxUW251bWJlcl0+O1xuZXhwb3J0IGZ1bmN0aW9uIHJhY2U8VCBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXT4oLi4uaW5wdXRzOiBbLi4uT2JzZXJ2YWJsZUlucHV0VHVwbGU8VD5dKTogT2JzZXJ2YWJsZTxUW251bWJlcl0+O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIGZpcnN0IHNvdXJjZSBvYnNlcnZhYmxlIHRvIGVtaXQgYW4gaXRlbS5cbiAqXG4gKiAhW10ocmFjZS5wbmcpXG4gKlxuICogYHJhY2VgIHJldHVybnMgYW4gb2JzZXJ2YWJsZSwgdGhhdCB3aGVuIHN1YnNjcmliZWQgdG8sIHN1YnNjcmliZXMgdG8gYWxsIHNvdXJjZSBvYnNlcnZhYmxlcyBpbW1lZGlhdGVseS5cbiAqIEFzIHNvb24gYXMgb25lIG9mIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZXMgZW1pdHMgYSB2YWx1ZSwgdGhlIHJlc3VsdCB1bnN1YnNjcmliZXMgZnJvbSB0aGUgb3RoZXIgc291cmNlcy5cbiAqIFRoZSByZXN1bHRpbmcgb2JzZXJ2YWJsZSB3aWxsIGZvcndhcmQgYWxsIG5vdGlmaWNhdGlvbnMsIGluY2x1ZGluZyBlcnJvciBhbmQgY29tcGxldGlvbiwgZnJvbSB0aGUgXCJ3aW5uaW5nXCJcbiAqIHNvdXJjZSBvYnNlcnZhYmxlLlxuICpcbiAqIElmIG9uZSBvZiB0aGUgdXNlZCBzb3VyY2Ugb2JzZXJ2YWJsZSB0aHJvd3MgYW4gZXJyb3JzIGJlZm9yZSBhIGZpcnN0IG5vdGlmaWNhdGlvblxuICogdGhlIHJhY2Ugb3BlcmF0b3Igd2lsbCBhbHNvIHRocm93IGFuIGVycm9yLCBubyBtYXR0ZXIgaWYgYW5vdGhlciBzb3VyY2Ugb2JzZXJ2YWJsZVxuICogY291bGQgcG90ZW50aWFsbHkgd2luIHRoZSByYWNlLlxuICpcbiAqIGByYWNlYCBjYW4gYmUgdXNlZnVsIGZvciBzZWxlY3RpbmcgdGhlIHJlc3BvbnNlIGZyb20gdGhlIGZhc3Rlc3QgbmV0d29yayBjb25uZWN0aW9uIGZvclxuICogSFRUUCBvciBXZWJTb2NrZXRzLiBgcmFjZWAgY2FuIGFsc28gYmUgdXNlZnVsIGZvciBzd2l0Y2hpbmcgb2JzZXJ2YWJsZSBjb250ZXh0IGJhc2VkIG9uIHVzZXJcbiAqIGlucHV0LlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBTdWJzY3JpYmVzIHRvIHRoZSBvYnNlcnZhYmxlIHRoYXQgd2FzIHRoZSBmaXJzdCB0byBzdGFydCBlbWl0dGluZy5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaW50ZXJ2YWwsIG1hcCwgcmFjZSB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IG9iczEgPSBpbnRlcnZhbCg3MDAwKS5waXBlKG1hcCgoKSA9PiAnc2xvdyBvbmUnKSk7XG4gKiBjb25zdCBvYnMyID0gaW50ZXJ2YWwoMzAwMCkucGlwZShtYXAoKCkgPT4gJ2Zhc3Qgb25lJykpO1xuICogY29uc3Qgb2JzMyA9IGludGVydmFsKDUwMDApLnBpcGUobWFwKCgpID0+ICdtZWRpdW0gb25lJykpO1xuICpcbiAqIHJhY2Uob2JzMSwgb2JzMiwgb2JzMylcbiAqICAgLnN1YnNjcmliZSh3aW5uZXIgPT4gY29uc29sZS5sb2cod2lubmVyKSk7XG4gKlxuICogLy8gT3V0cHV0c1xuICogLy8gYSBzZXJpZXMgb2YgJ2Zhc3Qgb25lJ1xuICogYGBgXG4gKlxuICogQHBhcmFtIHNvdXJjZXMgVXNlZCB0byByYWNlIGZvciB3aGljaCBgT2JzZXJ2YWJsZUlucHV0YCBlbWl0cyBmaXJzdC5cbiAqIEByZXR1cm4gQW4gT2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIG91dHB1dCBvZiB0aGUgZmlyc3QgT2JzZXJ2YWJsZSB0byBlbWl0IGFuIGl0ZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYWNlPFQ+KC4uLnNvdXJjZXM6IChPYnNlcnZhYmxlSW5wdXQ8VD4gfCBPYnNlcnZhYmxlSW5wdXQ8VD5bXSlbXSk6IE9ic2VydmFibGU8YW55PiB7XG4gIHNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheShzb3VyY2VzKTtcbiAgLy8gSWYgb25seSBvbmUgc291cmNlIHdhcyBwYXNzZWQsIGp1c3QgcmV0dXJuIGl0LiBPdGhlcndpc2UgcmV0dXJuIHRoZSByYWNlLlxuICByZXR1cm4gc291cmNlcy5sZW5ndGggPT09IDEgPyBpbm5lckZyb20oc291cmNlc1swXSBhcyBPYnNlcnZhYmxlSW5wdXQ8VD4pIDogbmV3IE9ic2VydmFibGU8VD4ocmFjZUluaXQoc291cmNlcyBhcyBPYnNlcnZhYmxlSW5wdXQ8VD5bXSkpO1xufVxuXG4vKipcbiAqIEFuIG9ic2VydmFibGUgaW5pdGlhbGl6ZXIgZnVuY3Rpb24gZm9yIGJvdGggdGhlIHN0YXRpYyB2ZXJzaW9uIGFuZCB0aGVcbiAqIG9wZXJhdG9yIHZlcnNpb24gb2YgcmFjZS5cbiAqIEBwYXJhbSBzb3VyY2VzIFRoZSBzb3VyY2VzIHRvIHJhY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhY2VJbml0PFQ+KHNvdXJjZXM6IE9ic2VydmFibGVJbnB1dDxUPltdKSB7XG4gIHJldHVybiAoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPikgPT4ge1xuICAgIGxldCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gICAgLy8gU3Vic2NyaWJlIHRvIGFsbCBvZiB0aGUgc291cmNlcy4gTm90ZSB0aGF0IHdlIGFyZSBjaGVja2luZyBgc3Vic2NyaXB0aW9uc2AgaGVyZVxuICAgIC8vIElzIGlzIGFuIGFycmF5IG9mIGFsbCBhY3RpdmVseSBcInJhY2luZ1wiIHN1YnNjcmlwdGlvbnMsIGFuZCBpdCBpcyBgbnVsbGAgYWZ0ZXIgdGhlXG4gICAgLy8gcmFjZSBoYXMgYmVlbiB3b24uIFNvLCBpZiB3ZSBoYXZlIHJhY2VyIHRoYXQgc3luY2hyb25vdXNseSBcIndpbnNcIiwgdGhpcyBsb29wIHdpbGxcbiAgICAvLyBzdG9wIGJlZm9yZSBpdCBzdWJzY3JpYmVzIHRvIGFueSBtb3JlLlxuICAgIGZvciAobGV0IGkgPSAwOyBzdWJzY3JpcHRpb25zICYmICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgICBpbm5lckZyb20oc291cmNlc1tpXSBhcyBPYnNlcnZhYmxlSW5wdXQ8VD4pLnN1YnNjcmliZShcbiAgICAgICAgICBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAvLyBXZSdyZSBzdGlsbCByYWNpbmcsIGJ1dCB3ZSB3b24hIFNvIHVuc3Vic2NyaWJlXG4gICAgICAgICAgICAgIC8vIGFsbCBvdGhlciBzdWJzY3JpcHRpb25zIHRoYXQgd2UgaGF2ZSwgZXhjZXB0IHRoaXMgb25lLlxuICAgICAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHN1YnNjcmlwdGlvbnMubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgICAgICAgICBzICE9PSBpICYmIHN1YnNjcmlwdGlvbnNbc10udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zID0gbnVsbCE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgIH0pXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9O1xufVxuIl19
