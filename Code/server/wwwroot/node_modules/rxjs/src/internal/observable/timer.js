import{Observable}from"../Observable";import{async as asyncScheduler}from"../scheduler/async";import{isScheduler}from"../util/isScheduler";import{isValidDate}from"../util/isDate";function timer(t=0,e,i=asyncScheduler){let s=-1;return null!=e&&(isScheduler(e)?i=e:s=e),new Observable(e=>{let r=isValidDate(t)?+t-i.now():t,l=(r<0&&(r=0),0);return i.schedule(function(){e.closed||(e.next(l++),0<=s?this.schedule(void 0,s):e.complete())},r)})}export{timer};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
