import{WebSocketSubject}from"./WebSocketSubject";function webSocket(e){return new WebSocketSubject(e)}export{webSocket};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
