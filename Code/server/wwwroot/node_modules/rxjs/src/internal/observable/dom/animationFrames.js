import{Observable}from"../../Observable";import{performanceTimestampProvider}from"../../scheduler/performanceTimestampProvider";import{animationFrameProvider}from"../../scheduler/animationFrameProvider";function animationFrames(r){return r?animationFramesFactory(r):DEFAULT_ANIMATION_FRAMES}function animationFramesFactory(t){return new Observable(a=>{let m=t||performanceTimestampProvider,i=m.now(),n=0,o=()=>{a.closed||(n=animationFrameProvider.requestAnimationFrame(r=>{n=0;var e=m.now();a.next({timestamp:t?e:r,elapsed:e-i}),o()}))};return o(),()=>{n&&animationFrameProvider.cancelAnimationFrame(n)}})}let DEFAULT_ANIMATION_FRAMES=animationFramesFactory();export{animationFrames};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
