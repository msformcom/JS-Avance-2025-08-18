import{Observable}from"../Observable";import{argsArgArrayOrObject}from"../util/argsArgArrayOrObject";import{from}from"./from";import{identity}from"../util/identity";import{mapOneOrManyArgs}from"../util/mapOneOrManyArgs";import{popResultSelector,popScheduler}from"../util/args";import{createObject}from"../util/createObject";import{createOperatorSubscriber}from"../operators/OperatorSubscriber";import{executeSchedule}from"../util/executeSchedule";function combineLatest(...e){var r=popScheduler(e),t=popResultSelector(e);let{args:o,keys:i}=argsArgArrayOrObject(e);return 0===o.length?from([],r):(e=new Observable(combineLatestInit(o,r,i?e=>createObject(i,e):identity)),t?e.pipe(mapOneOrManyArgs(t)):e)}function combineLatestInit(m,n,l=identity){return c=>{maybeSchedule(n,()=>{var e=m.length;let o=new Array(e),i=e,a=e;for(let t=0;t<e;t++)maybeSchedule(n,()=>{var e=from(m[t],n);let r=!1;e.subscribe(createOperatorSubscriber(c,e=>{o[t]=e,r||(r=!0,a--),a||c.next(l(o.slice()))},()=>{--i||c.complete()}))},c)},c)}}function maybeSchedule(e,r,t){e?executeSchedule(t,e,r):r()}export{combineLatest,combineLatestInit};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
