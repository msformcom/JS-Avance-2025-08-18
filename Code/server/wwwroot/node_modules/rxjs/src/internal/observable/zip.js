import{Observable}from"../Observable";import{innerFrom}from"./innerFrom";import{argsOrArgArray}from"../util/argsOrArgArray";import{EMPTY}from"./empty";import{createOperatorSubscriber}from"../operators/OperatorSubscriber";import{popResultSelector}from"../util/args";function zip(...r){let p=popResultSelector(r),m=argsOrArgArray(r);return m.length?new Observable(t=>{let o=m.map(()=>[]),l=m.map(()=>!1);t.add(()=>{o=l=null});for(let e=0;!t.closed&&e<m.length;e++)innerFrom(m[e]).subscribe(createOperatorSubscriber(t,r=>{o[e].push(r),o.every(r=>r.length)&&(r=o.map(r=>r.shift()),t.next(p?p(...r):r),o.some((r,e)=>!r.length&&l[e]))&&t.complete()},()=>{l[e]=!0,o[e].length||t.complete()}));return()=>{o=l=null}}):EMPTY}export{zip};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
