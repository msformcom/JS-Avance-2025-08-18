import{innerFrom}from"../observable/innerFrom";import{Observable}from"../Observable";import{mergeMap}from"../operators/mergeMap";import{isArrayLike}from"../util/isArrayLike";import{isFunction}from"../util/isFunction";import{mapOneOrManyArgs}from"../util/mapOneOrManyArgs";let nodeEventEmitterMethods=["addListener","removeListener"],eventTargetMethods=["addEventListener","removeEventListener"],jqueryMethods=["on","off"];function fromEvent(r,n,i,e){if(isFunction(i)&&(e=i,i=void 0),e)return fromEvent(r,n,i).pipe(mapOneOrManyArgs(e));let[o,m]=isEventTarget(r)?eventTargetMethods.map(t=>e=>r[t](n,e,i)):isNodeStyleEventEmitter(r)?nodeEventEmitterMethods.map(toCommonHandlerRegistry(r,n)):isJQueryStyleEventEmitter(r)?jqueryMethods.map(toCommonHandlerRegistry(r,n)):[];if(!o&&isArrayLike(r))return mergeMap(e=>fromEvent(e,n,i))(innerFrom(r));if(o)return new Observable(t=>{let e=(...e)=>t.next(1<e.length?e:e[0]);return o(e),()=>m(e)});throw new TypeError("Invalid event target")}function toCommonHandlerRegistry(r,n){return t=>e=>r[t](n,e)}function isNodeStyleEventEmitter(e){return isFunction(e.addListener)&&isFunction(e.removeListener)}function isJQueryStyleEventEmitter(e){return isFunction(e.on)&&isFunction(e.off)}function isEventTarget(e){return isFunction(e.addEventListener)&&isFunction(e.removeEventListener)}export{fromEvent};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
