import{Observable}from"../Observable";import{argsArgArrayOrObject}from"../util/argsArgArrayOrObject";import{innerFrom}from"./innerFrom";import{popResultSelector}from"../util/args";import{createOperatorSubscriber}from"../operators/OperatorSubscriber";import{mapOneOrManyArgs}from"../util/mapOneOrManyArgs";import{createObject}from"../util/createObject";function forkJoin(...r){var e=popResultSelector(r);let{args:p,keys:m}=argsArgArrayOrObject(r);r=new Observable(i=>{var e=p.length;if(e){let o=new Array(e),r=e,a=e;for(let t=0;t<e;t++){let e=!1;innerFrom(p[t]).subscribe(createOperatorSubscriber(i,r=>{e||(e=!0,a--),o[t]=r},()=>r--,void 0,()=>{r&&e||(a||i.next(m?createObject(m,o):o),i.complete())}))}}else i.complete()});return e?r.pipe(mapOneOrManyArgs(e)):r}export{forkJoin};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
