import{identity}from"../util/identity";import{isScheduler}from"../util/isScheduler";import{defer}from"./defer";import{scheduleIterable}from"../scheduled/scheduleIterable";function generate(e,t,r,i,l){let d,n;function*o(){for(let e=n;!t||t(e);e=r(e))yield d(e)}return 1===arguments.length?{initialState:n,condition:t,iterate:r,resultSelector:d=identity,scheduler:l}=e:(n=e,!i||isScheduler(i)?(d=identity,l=i):d=i),defer(l?()=>scheduleIterable(o(),l):o)}export{generate};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
