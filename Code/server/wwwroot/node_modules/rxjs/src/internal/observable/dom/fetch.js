import{createOperatorSubscriber}from"../../operators/OperatorSubscriber";import{Observable}from"../../Observable";import{innerFrom}from"../../observable/innerFrom";function fromFetch(i,r={}){let{selector:l,...s}=r;return new Observable(e=>{let t=new AbortController,o=t.signal,a=!0,b=s.signal;if(b)if(b.aborted)t.abort();else{let r=()=>{o.aborted||t.abort()};b.addEventListener("abort",r),e.add(()=>b.removeEventListener("abort",r))}var r={...s,signal:o};let n=r=>{a=!1,e.error(r)};return fetch(i,r).then(r=>{l?innerFrom(l(r)).subscribe(createOperatorSubscriber(e,void 0,()=>{a=!1,e.complete()},n)):(a=!1,e.next(r),e.complete())}).catch(n),()=>{a&&t.abort()}})}export{fromFetch};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
