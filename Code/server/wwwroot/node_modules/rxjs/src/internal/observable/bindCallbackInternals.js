import{isScheduler}from"../util/isScheduler";import{Observable}from"../Observable";import{subscribeOn}from"../operators/subscribeOn";import{mapOneOrManyArgs}from"../util/mapOneOrManyArgs";import{observeOn}from"../operators/observeOn";import{AsyncSubject}from"../AsyncSubject";function bindCallbackInternals(l,b,e,n){if(e){if(!isScheduler(e))return function(...r){return bindCallbackInternals(l,b,n).apply(this,r).pipe(mapOneOrManyArgs(e))};n=e}return n?function(...r){return bindCallbackInternals(l,b).apply(this,r).pipe(subscribeOn(n),observeOn(n))}:function(...e){let i=new AsyncSubject,s=!0;return new Observable(r=>{r=i.subscribe(r);if(s){let n=s=!1,t=!1;b.apply(this,[...e,(...r)=>{if(l){var e=r.shift();if(null!=e)return void i.error(e)}i.next(1<r.length?r:r[0]),t=!0,n&&i.complete()}]),t&&i.complete(),n=!0}return r})}}export{bindCallbackInternals};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
