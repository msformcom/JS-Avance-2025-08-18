import{asyncScheduler}from"../scheduler/async";import{isValidDate}from"../util/isDate";import{operate}from"../util/lift";import{innerFrom}from"../observable/innerFrom";import{createErrorClass}from"../util/createErrorClass";import{createOperatorSubscriber}from"./OperatorSubscriber";import{executeSchedule}from"../util/executeSchedule";let TimeoutError=createErrorClass(e=>function(r=null){e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=r});function timeout(r,e){let{first:c,each:l,with:n=timeoutErrorFactory,scheduler:a=e??asyncScheduler,meta:m=null}=isValidDate(r)?{first:r}:"number"==typeof r?{each:r}:r;if(null==c&&null==l)throw new TypeError("No timeout provided.");return operate((r,e)=>{let t,o,i=null,u=0,s=r=>{o=executeSchedule(e,a,()=>{try{t.unsubscribe(),innerFrom(n({meta:m,lastValue:i,seen:u})).subscribe(e)}catch(r){e.error(r)}},r)};t=r.subscribe(createOperatorSubscriber(e,r=>{o?.unsubscribe(),u++,e.next(i=r),0<l&&s(l)},void 0,void 0,()=>{o?.closed||o?.unsubscribe(),i=null})),u||s(null!=c?"number"==typeof c?c:+c-a.now():l)})}function timeoutErrorFactory(r){throw new TimeoutError(r)}export{TimeoutError,timeout};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
