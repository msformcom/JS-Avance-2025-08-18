import{Subject}from"../Subject";import{Subscription}from"../Subscription";import{operate}from"../util/lift";import{innerFrom}from"../observable/innerFrom";import{createOperatorSubscriber}from"./OperatorSubscriber";import{noop}from"../util/noop";import{arrRemove}from"../util/arrRemove";function windowToggle(e,c){return operate((r,i)=>{let b=[],n=r=>{for(;0<b.length;)b.shift().error(r);i.error(r)};innerFrom(e).subscribe(createOperatorSubscriber(i,r=>{let e=new Subject,o=(b.push(e),new Subscription);let t;try{t=innerFrom(c(r))}catch(r){return void n(r)}i.next(e.asObservable()),o.add(t.subscribe(createOperatorSubscriber(i,()=>{arrRemove(b,e),e.complete(),o.unsubscribe()},noop,n)))},noop)),r.subscribe(createOperatorSubscriber(i,r=>{var e;for(e of b.slice())e.next(r)},()=>{for(;0<b.length;)b.shift().complete();i.complete()},n,()=>{for(;0<b.length;)b.shift().unsubscribe()}))})}export{windowToggle};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
