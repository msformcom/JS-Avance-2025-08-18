import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{arrRemove}from"../util/arrRemove";function bufferCount(i,l=null){return l=l??i,operate((r,u)=>{let f=[],a=0;r.subscribe(createOperatorSubscriber(u,r=>{let e=null;a++%l==0&&f.push([]);for(var o of f)o.push(r),i<=o.length&&(e=e??[]).push(o);if(e)for(var t of e)arrRemove(f,t),u.next(t)},()=>{for(var r of f)u.next(r);u.complete()},void 0,()=>{f=null}))})}export{bufferCount};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnQudHMiXSwibmFtZXMiOlsib3BlcmF0ZSIsImNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciIsImFyclJlbW92ZSIsImJ1ZmZlckNvdW50IiwiYnVmZmVyU2l6ZSIsInN0YXJ0QnVmZmVyRXZlcnkiLCJzb3VyY2UiLCJzdWJzY3JpYmVyIiwibGV0IiwiYnVmZmVycyIsImNvdW50Iiwic3Vic2NyaWJlIiwidG9FbWl0IiwicHVzaCIsImJ1ZmZlciIsInZhbHVlIiwibGVuZ3RoIiwibmV4dCIsImNvbXBsZXRlIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiT0FDU0EsT0FBNkIsS0FBZCxzQkFDZkMsd0JBQXNELEtBQXRCLDhCQUNoQ0MsU0FBb0MsS0FBbkIsb0JBcURwQixTQUFVQyxZQUFlQyxFQUFvQkMsRUFBa0MsTUFLbkYsT0FGQUEsRUFBbUJBLEdBQW9CRCxFQUVoQ0osUUFBUSxDQUFDTSxFQUFRQyxLQUN0QkMsSUFBSUMsRUFBaUIsR0FDakJDLEVBQVEsRUFFWkosRUFBT0ssVUFDTFYseUJBQ0VNLEVBQ0EsSUFDRUMsSUFBSUksRUFBdUIsS0FLdkJGLENBQUssR0FBS0wsR0FBc0IsR0FDbENJLEVBQVFJLEtBQUssRUFBRSxFQUlqQixJQUFLLElBQU1DLEtBQVVMLEVBQ25CSyxFQUFPRCxLQUFLRSxDQUFLLEVBTWJYLEdBQWNVLEVBQU9FLFNBQ3ZCSixFQUFTQSxHQUFVLElBQ1pDLEtBQUtDLENBQU0sRUFJdEIsR0FBSUYsRUFJRixJQUFLLElBQU1FLEtBQVVGLEVBQ25CVixVQUFVTyxFQUFTSyxDQUFNLEVBQ3pCUCxFQUFXVSxLQUFLSCxDQUFNLENBRzVCLEVBQ0EsS0FHRSxJQUFLLElBQU1BLEtBQVVMLEVBQ25CRixFQUFXVSxLQUFLSCxDQUFNLEVBRXhCUCxFQUFXVyxTQUFRLENBQ3JCLEVBRUFDLEtBQUFBLEVBQ0EsS0FFRVYsRUFBVSxJQUNaLENBQUMsQ0FDRixDQUVMLENBQUMsQ0FDSCxRQS9EZ0JOLFdBK0RoQiIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlckNvdW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi4vdXRpbC9hcnJSZW1vdmUnO1xuXG4vKipcbiAqIEJ1ZmZlcnMgdGhlIHNvdXJjZSBPYnNlcnZhYmxlIHZhbHVlcyB1bnRpbCB0aGUgc2l6ZSBoaXRzIHRoZSBtYXhpbXVtXG4gKiBgYnVmZmVyU2l6ZWAgZ2l2ZW4uXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkNvbGxlY3RzIHZhbHVlcyBmcm9tIHRoZSBwYXN0IGFzIGFuIGFycmF5LCBhbmQgZW1pdHNcbiAqIHRoYXQgYXJyYXkgb25seSB3aGVuIGl0cyBzaXplIHJlYWNoZXMgYGJ1ZmZlclNpemVgLjwvc3Bhbj5cbiAqXG4gKiAhW10oYnVmZmVyQ291bnQucG5nKVxuICpcbiAqIEJ1ZmZlcnMgYSBudW1iZXIgb2YgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlIGJ5IGBidWZmZXJTaXplYCB0aGVuXG4gKiBlbWl0cyB0aGUgYnVmZmVyIGFuZCBjbGVhcnMgaXQsIGFuZCBzdGFydHMgYSBuZXcgYnVmZmVyIGVhY2hcbiAqIGBzdGFydEJ1ZmZlckV2ZXJ5YCB2YWx1ZXMuIElmIGBzdGFydEJ1ZmZlckV2ZXJ5YCBpcyBub3QgcHJvdmlkZWQgb3IgaXNcbiAqIGBudWxsYCwgdGhlbiBuZXcgYnVmZmVycyBhcmUgc3RhcnRlZCBpbW1lZGlhdGVseSBhdCB0aGUgc3RhcnQgb2YgdGhlIHNvdXJjZVxuICogYW5kIHdoZW4gZWFjaCBidWZmZXIgY2xvc2VzIGFuZCBpcyBlbWl0dGVkLlxuICpcbiAqICMjIEV4YW1wbGVzXG4gKlxuICogRW1pdCB0aGUgbGFzdCB0d28gY2xpY2sgZXZlbnRzIGFzIGFuIGFycmF5XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZyb21FdmVudCwgYnVmZmVyQ291bnQgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjb25zdCBjbGlja3MgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogY29uc3QgYnVmZmVyZWQgPSBjbGlja3MucGlwZShidWZmZXJDb3VudCgyKSk7XG4gKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKiBgYGBcbiAqXG4gKiBPbiBldmVyeSBjbGljaywgZW1pdCB0aGUgbGFzdCB0d28gY2xpY2sgZXZlbnRzIGFzIGFuIGFycmF5XG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGZyb21FdmVudCwgYnVmZmVyQ291bnQgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjb25zdCBjbGlja3MgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycpO1xuICogY29uc3QgYnVmZmVyZWQgPSBjbGlja3MucGlwZShidWZmZXJDb3VudCgyLCAxKSk7XG4gKiBidWZmZXJlZC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBidWZmZXJ9XG4gKiBAc2VlIHtAbGluayBidWZmZXJUaW1lfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyVG9nZ2xlfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyV2hlbn1cbiAqIEBzZWUge0BsaW5rIHBhaXJ3aXNlfVxuICogQHNlZSB7QGxpbmsgd2luZG93Q291bnR9XG4gKlxuICogQHBhcmFtIGJ1ZmZlclNpemUgVGhlIG1heGltdW0gc2l6ZSBvZiB0aGUgYnVmZmVyIGVtaXR0ZWQuXG4gKiBAcGFyYW0gc3RhcnRCdWZmZXJFdmVyeSBJbnRlcnZhbCBhdCB3aGljaCB0byBzdGFydCBhIG5ldyBidWZmZXIuXG4gKiBGb3IgZXhhbXBsZSBpZiBgc3RhcnRCdWZmZXJFdmVyeWAgaXMgYDJgLCB0aGVuIGEgbmV3IGJ1ZmZlciB3aWxsIGJlIHN0YXJ0ZWRcbiAqIG9uIGV2ZXJ5IG90aGVyIHZhbHVlIGZyb20gdGhlIHNvdXJjZS4gQSBuZXcgYnVmZmVyIGlzIHN0YXJ0ZWQgYXQgdGhlXG4gKiBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBieSBkZWZhdWx0LlxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIG9mIGFycmF5cyBvZiBidWZmZXJlZCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXJDb3VudDxUPihidWZmZXJTaXplOiBudW1iZXIsIHN0YXJ0QnVmZmVyRXZlcnk6IG51bWJlciB8IG51bGwgPSBudWxsKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUW10+IHtcbiAgLy8gSWYgbm8gYHN0YXJ0QnVmZmVyRXZlcnlgIHZhbHVlIHdhcyBzdXBwbGllZCwgdGhlbiB3ZSdyZVxuICAvLyBvcGVuaW5nIGFuZCBjbG9zaW5nIG9uIHRoZSBidWZmZXJTaXplIGl0c2VsZi5cbiAgc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnkgPz8gYnVmZmVyU2l6ZTtcblxuICByZXR1cm4gb3BlcmF0ZSgoc291cmNlLCBzdWJzY3JpYmVyKSA9PiB7XG4gICAgbGV0IGJ1ZmZlcnM6IFRbXVtdID0gW107XG4gICAgbGV0IGNvdW50ID0gMDtcblxuICAgIHNvdXJjZS5zdWJzY3JpYmUoXG4gICAgICBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoXG4gICAgICAgIHN1YnNjcmliZXIsXG4gICAgICAgICh2YWx1ZSkgPT4ge1xuICAgICAgICAgIGxldCB0b0VtaXQ6IFRbXVtdIHwgbnVsbCA9IG51bGw7XG5cbiAgICAgICAgICAvLyBDaGVjayB0byBzZWUgaWYgd2UgbmVlZCB0byBzdGFydCBhIGJ1ZmZlci5cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgc3RhcnQgb25lIGF0IHRoZSBmaXJzdCB2YWx1ZSwgYW5kIHRoZW5cbiAgICAgICAgICAvLyBhIG5ldyBvbmUgZXZlcnkgTiBhZnRlciB0aGF0LlxuICAgICAgICAgIGlmIChjb3VudCsrICUgc3RhcnRCdWZmZXJFdmVyeSEgPT09IDApIHtcbiAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUHVzaCBvdXIgdmFsdWUgaW50byBvdXIgYWN0aXZlIGJ1ZmZlcnMuXG4gICAgICAgICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICAgICAgYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHdlJ3JlIG92ZXIgdGhlIGJ1ZmZlclNpemVcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSwgcmVjb3JkIGl0IHNvIHdlIGNhbiBlbWl0IGl0IGxhdGVyLlxuICAgICAgICAgICAgLy8gSWYgd2UgZW1pdHRlZCBpdCBub3cgYW5kIHJlbW92ZWQgaXQsIGl0IHdvdWxkXG4gICAgICAgICAgICAvLyBtdXRhdGUgdGhlIGBidWZmZXJzYCBhcnJheSB3aGlsZSB3ZSdyZSBsb29waW5nXG4gICAgICAgICAgICAvLyBvdmVyIGl0LlxuICAgICAgICAgICAgaWYgKGJ1ZmZlclNpemUgPD0gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICB0b0VtaXQgPSB0b0VtaXQgPz8gW107XG4gICAgICAgICAgICAgIHRvRW1pdC5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRvRW1pdCkge1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSBmb3VuZCBzb21lIGJ1ZmZlcnMgdGhhdCBhcmUgb3ZlciB0aGVcbiAgICAgICAgICAgIC8vIGBidWZmZXJTaXplYC4gRW1pdCB0aGVtLCBhbmQgcmVtb3ZlIHRoZW0gZnJvbSBvdXJcbiAgICAgICAgICAgIC8vIGJ1ZmZlcnMgbGlzdC5cbiAgICAgICAgICAgIGZvciAoY29uc3QgYnVmZmVyIG9mIHRvRW1pdCkge1xuICAgICAgICAgICAgICBhcnJSZW1vdmUoYnVmZmVycywgYnVmZmVyKTtcbiAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgLy8gV2hlbiB0aGUgc291cmNlIGNvbXBsZXRlcywgZW1pdCBhbGwgb2Ygb3VyXG4gICAgICAgICAgLy8gYWN0aXZlIGJ1ZmZlcnMuXG4gICAgICAgICAgZm9yIChjb25zdCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUGFzcyBhbGwgZXJyb3JzIHRocm91Z2ggdG8gY29uc3VtZXIuXG4gICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIENsZWFuIHVwIG91ciBtZW1vcnkgd2hlbiB3ZSBmaW5hbGl6ZVxuICAgICAgICAgIGJ1ZmZlcnMgPSBudWxsITtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH0pO1xufVxuIl19
