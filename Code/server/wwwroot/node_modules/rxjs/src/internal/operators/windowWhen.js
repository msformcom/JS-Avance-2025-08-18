import{Subject}from"../Subject";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{innerFrom}from"../observable/innerFrom";function windowWhen(c){return operate((r,e)=>{let t,o,b=r=>{t.error(r),e.error(r)},i=()=>{o?.unsubscribe(),t?.complete(),t=new Subject,e.next(t.asObservable());let r;try{r=innerFrom(c())}catch(r){return void b(r)}r.subscribe(o=createOperatorSubscriber(e,i,i,b))};i(),r.subscribe(createOperatorSubscriber(e,r=>t.next(r),()=>{t.complete(),e.complete()},b,()=>{o?.unsubscribe(),t=null}))})}export{windowWhen};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93V2hlbi50cyJdLCJuYW1lcyI6WyJTdWJqZWN0Iiwib3BlcmF0ZSIsImNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciIsImlubmVyRnJvbSIsIndpbmRvd1doZW4iLCJjbG9zaW5nU2VsZWN0b3IiLCJzb3VyY2UiLCJzdWJzY3JpYmVyIiwibGV0Iiwid2luZG93IiwiY2xvc2luZ1N1YnNjcmliZXIiLCJoYW5kbGVFcnJvciIsImVycm9yIiwiZXJyIiwib3BlbldpbmRvdyIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCJuZXh0IiwiYXNPYnNlcnZhYmxlIiwiY2xvc2luZ05vdGlmaWVyIiwic3Vic2NyaWJlIiwidmFsdWUiXSwibWFwcGluZ3MiOiJPQUVTQSxPQUEyQixLQUFaLG9CQUVmQyxPQUE2QixLQUFkLHNCQUNmQyx3QkFBc0QsS0FBdEIsOEJBQ2hDQyxTQUEwQyxLQUF6QiwwQkErQ3BCLFNBQVVDLFdBQWNDLEdBQzVCLE9BQU9KLFFBQVEsQ0FBQ0ssRUFBUUMsS0FDdEJDLElBQUlDLEVBQ0FDLEVBTUVDLEVBQWMsSUFDbEJGLEVBQVFHLE1BQU1DLENBQUcsRUFDakJOLEVBQVdLLE1BQU1DLENBQUcsQ0FDdEIsRUFRTUMsRUFBYSxLQUdqQkosR0FBbUJLLFlBQVcsRUFHOUJOLEdBQVFPLFNBQVEsRUFHaEJQLEVBQVMsSUFBSVQsUUFDYk8sRUFBV1UsS0FBS1IsRUFBT1MsYUFBWSxDQUFFLEVBR3JDVixJQUFJVyxFQUNKLElBQ0VBLEVBQWtCaEIsVUFBVUUsRUFBZSxDQUFFLENBSS9DLENBSEUsTUFBT1EsR0FFUCxPQURBRixLQUFBQSxFQUFZRSxDQUFHLENBRWpCLENBTUFNLEVBQWdCQyxVQUFXVixFQUFvQlIseUJBQXlCSyxFQUFZTyxFQUFZQSxFQUFZSCxDQUFXLENBQUUsQ0FDM0gsRUFHQUcsRUFBVSxFQUdWUixFQUFPYyxVQUNMbEIseUJBQ0VLLEVBQ0EsR0FBV0UsRUFBUVEsS0FBS0ksQ0FBSyxFQUM3QixLQUVFWixFQUFRTyxTQUFRLEVBQ2hCVCxFQUFXUyxTQUFRLENBQ3JCLEVBQ0FMLEVBQ0EsS0FHRUQsR0FBbUJLLFlBQVcsRUFDOUJOLEVBQVMsSUFDWCxDQUFDLENBQ0YsQ0FFTCxDQUFDLENBQ0gsUUF2RWdCTCxVQXVFaEIiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dXaGVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaWJlciB9IGZyb20gJy4uL1N1YnNjcmliZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJy4uL1N1YmplY3QnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZUlucHV0LCBPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5cbi8qKlxuICogQnJhbmNoIG91dCB0aGUgc291cmNlIE9ic2VydmFibGUgdmFsdWVzIGFzIGEgbmVzdGVkIE9ic2VydmFibGUgdXNpbmcgYVxuICogZmFjdG9yeSBmdW5jdGlvbiBvZiBjbG9zaW5nIE9ic2VydmFibGVzIHRvIGRldGVybWluZSB3aGVuIHRvIHN0YXJ0IGEgbmV3XG4gKiB3aW5kb3cuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3MgbGlrZSB7QGxpbmsgYnVmZmVyV2hlbn0sIGJ1dCBlbWl0cyBhIG5lc3RlZFxuICogT2JzZXJ2YWJsZSBpbnN0ZWFkIG9mIGFuIGFycmF5Ljwvc3Bhbj5cbiAqXG4gKiAhW10od2luZG93V2hlbi5wbmcpXG4gKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgZW1pdHMgd2luZG93cyBvZiBpdGVtcyBpdCBjb2xsZWN0cyBmcm9tIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUuIFRoZSBvdXRwdXQgT2JzZXJ2YWJsZSBlbWl0cyBjb25uZWN0ZWQsIG5vbi1vdmVybGFwcGluZyB3aW5kb3dzLlxuICogSXQgZW1pdHMgdGhlIGN1cnJlbnQgd2luZG93IGFuZCBvcGVucyBhIG5ldyBvbmUgd2hlbmV2ZXIgdGhlIE9ic2VydmFibGVcbiAqIHByb2R1Y2VkIGJ5IHRoZSBzcGVjaWZpZWQgYGNsb3NpbmdTZWxlY3RvcmAgZnVuY3Rpb24gZW1pdHMgYW4gaXRlbS4gVGhlIGZpcnN0XG4gKiB3aW5kb3cgaXMgb3BlbmVkIGltbWVkaWF0ZWx5IHdoZW4gc3Vic2NyaWJpbmcgdG8gdGhlIG91dHB1dCBPYnNlcnZhYmxlLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBFbWl0IG9ubHkgdGhlIGZpcnN0IHR3byBjbGlja3MgZXZlbnRzIGluIGV2ZXJ5IHdpbmRvdyBvZiBbMS01XSByYW5kb20gc2Vjb25kc1xuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBmcm9tRXZlbnQsIHdpbmRvd1doZW4sIGludGVydmFsLCBtYXAsIHRha2UsIG1lcmdlQWxsIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3QgY2xpY2tzID0gZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGNsaWNrcy5waXBlKFxuICogICB3aW5kb3dXaGVuKCgpID0+IGludGVydmFsKDEwMDAgKyBNYXRoLnJhbmRvbSgpICogNDAwMCkpLFxuICogICBtYXAod2luID0+IHdpbi5waXBlKHRha2UoMikpKSwgLy8gdGFrZSBhdCBtb3N0IDIgZW1pc3Npb25zIGZyb20gZWFjaCB3aW5kb3dcbiAqICAgbWVyZ2VBbGwoKSAgICAgICAgICAgICAgICAgICAgIC8vIGZsYXR0ZW4gdGhlIE9ic2VydmFibGUtb2YtT2JzZXJ2YWJsZXNcbiAqICk7XG4gKiByZXN1bHQuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgd2luZG93fVxuICogQHNlZSB7QGxpbmsgd2luZG93Q291bnR9XG4gKiBAc2VlIHtAbGluayB3aW5kb3dUaW1lfVxuICogQHNlZSB7QGxpbmsgd2luZG93VG9nZ2xlfVxuICogQHNlZSB7QGxpbmsgYnVmZmVyV2hlbn1cbiAqXG4gKiBAcGFyYW0gY2xvc2luZ1NlbGVjdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBubyBhcmd1bWVudHMgYW5kIHJldHVybnMgYW5cbiAqIHtAbGluayBPYnNlcnZhYmxlSW5wdXR9ICh0aGF0IGdldHMgY29udmVydGVkIHRvIE9ic2VydmFibGUpIHRoYXQgc2lnbmFsc1xuICogKG9uIGVpdGhlciBgbmV4dGAgb3IgYGNvbXBsZXRlYCkgd2hlbiB0byBjbG9zZSB0aGUgcHJldmlvdXMgd2luZG93IGFuZFxuICogc3RhcnQgYSBuZXcgb25lLlxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIG9mIHdpbmRvd3MsIHdoaWNoIGluIHR1cm4gYXJlXG4gKiBPYnNlcnZhYmxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd1doZW48VD4oY2xvc2luZ1NlbGVjdG9yOiAoKSA9PiBPYnNlcnZhYmxlSW5wdXQ8YW55Pik6IE9wZXJhdG9yRnVuY3Rpb248VCwgT2JzZXJ2YWJsZTxUPj4ge1xuICByZXR1cm4gb3BlcmF0ZSgoc291cmNlLCBzdWJzY3JpYmVyKSA9PiB7XG4gICAgbGV0IHdpbmRvdzogU3ViamVjdDxUPiB8IG51bGw7XG4gICAgbGV0IGNsb3NpbmdTdWJzY3JpYmVyOiBTdWJzY3JpYmVyPGFueT4gfCB1bmRlZmluZWQ7XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIHdlIGdldCBhbiBlcnJvciwgd2UgaGF2ZSB0byBub3RpZnkgYm90aCB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBzdWJzY3JpYmVyIGFuZCB0aGUgd2luZG93LlxuICAgICAqL1xuICAgIGNvbnN0IGhhbmRsZUVycm9yID0gKGVycjogYW55KSA9PiB7XG4gICAgICB3aW5kb3chLmVycm9yKGVycik7XG4gICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENhbGxlZCBldmVyeSB0aW1lIHdlIG5lZWQgdG8gb3BlbiBhIHdpbmRvdy5cbiAgICAgKiBSZWN1cnNpdmUsIGFzIGl0IHdpbGwgc3RhcnQgdGhlIGNsb3Npbmcgbm90aWZpZXIsIHdoaWNoXG4gICAgICogaW5ldml0YWJseSAqc2hvdWxkKiBjYWxsIG9wZW5XaW5kb3cgLS0gYnV0IG1heSBub3QgaWZcbiAgICAgKiBpdCBpcyBhIFwibmV2ZXJcIiBvYnNlcnZhYmxlLlxuICAgICAqL1xuICAgIGNvbnN0IG9wZW5XaW5kb3cgPSAoKSA9PiB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGNsZWFuIHVwIG91ciBjbG9zaW5nIHN1YnNjcmlwdGlvbixcbiAgICAgIC8vIHdlIG9ubHkgY2FyZWQgYWJvdXQgdGhlIGZpcnN0IG5leHQgb3IgY29tcGxldGUgbm90aWZpY2F0aW9uLlxuICAgICAgY2xvc2luZ1N1YnNjcmliZXI/LnVuc3Vic2NyaWJlKCk7XG5cbiAgICAgIC8vIENsb3NlIG91ciB3aW5kb3cgYmVmb3JlIHN0YXJ0aW5nIGEgbmV3IG9uZS5cbiAgICAgIHdpbmRvdz8uY29tcGxldGUoKTtcblxuICAgICAgLy8gU3RhcnQgdGhlIG5ldyB3aW5kb3cuXG4gICAgICB3aW5kb3cgPSBuZXcgU3ViamVjdDxUPigpO1xuICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvdy5hc09ic2VydmFibGUoKSk7XG5cbiAgICAgIC8vIEdldCBvdXIgY2xvc2luZyBub3RpZmllci5cbiAgICAgIGxldCBjbG9zaW5nTm90aWZpZXI6IE9ic2VydmFibGU8YW55PjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb3NpbmdOb3RpZmllciA9IGlubmVyRnJvbShjbG9zaW5nU2VsZWN0b3IoKSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZXJyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIGNsb3Npbmcgbm90aWZpZXIsIGJlIHN1cmVcbiAgICAgIC8vIHRvIGNhcHR1cmUgdGhlIHN1YnNjcmliZXIgKGFrYSBTdWJzY3JpcHRpb24pXG4gICAgICAvLyBzbyB3ZSBjYW4gY2xlYW4gaXQgdXAgd2hlbiB3ZSBjbG9zZSB0aGUgd2luZG93XG4gICAgICAvLyBhbmQgb3BlbiBhIG5ldyBvbmUuXG4gICAgICBjbG9zaW5nTm90aWZpZXIuc3Vic2NyaWJlKChjbG9zaW5nU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvcGVuV2luZG93LCBvcGVuV2luZG93LCBoYW5kbGVFcnJvcikpKTtcbiAgICB9O1xuXG4gICAgLy8gU3RhcnQgdGhlIGZpcnN0IHdpbmRvdy5cbiAgICBvcGVuV2luZG93KCk7XG5cbiAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIHNvdXJjZVxuICAgIHNvdXJjZS5zdWJzY3JpYmUoXG4gICAgICBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoXG4gICAgICAgIHN1YnNjcmliZXIsXG4gICAgICAgICh2YWx1ZSkgPT4gd2luZG93IS5uZXh0KHZhbHVlKSxcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIFRoZSBzb3VyY2UgY29tcGxldGVkLCBjbG9zZSB0aGUgd2luZG93IGFuZCBjb21wbGV0ZS5cbiAgICAgICAgICB3aW5kb3chLmNvbXBsZXRlKCk7XG4gICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBoYW5kbGVFcnJvcixcbiAgICAgICAgKCkgPT4ge1xuICAgICAgICAgIC8vIEJlIHN1cmUgdG8gY2xlYW4gdXAgb3VyIGNsb3Npbmcgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgLy8gd2hlbiB0aGlzIHRlYXJzIGRvd24uXG4gICAgICAgICAgY2xvc2luZ1N1YnNjcmliZXI/LnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgd2luZG93ID0gbnVsbCE7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9KTtcbn1cbiJdfQ==
