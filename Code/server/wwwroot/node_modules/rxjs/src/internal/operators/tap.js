import{isFunction}from"../util/isFunction";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{identity}from"../util/identity";function tap(r,e,t){let i=isFunction(r)||e||t?{next:r,error:e,complete:t}:r;return i?operate((r,e)=>{i.subscribe?.();let t=!0;r.subscribe(createOperatorSubscriber(e,r=>{i.next?.(r),e.next(r)},()=>{t=!1,i.complete?.(),e.complete()},r=>{t=!1,i.error?.(r),e.error(r)},()=>{t&&i.unsubscribe?.(),i.finalize?.()}))}):identity}export{tap};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
