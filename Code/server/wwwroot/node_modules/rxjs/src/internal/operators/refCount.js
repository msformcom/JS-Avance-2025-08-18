import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function refCount(){return operate((o,t)=>{let u=null;o._refCount++;var r=createOperatorSubscriber(t,void 0,void 0,void 0,()=>{var r,e;!o||o._refCount<=0||0<--o._refCount?u=null:(r=o._connection,e=u,u=null,!r||e&&r!==e||r.unsubscribe(),t.unsubscribe())});o.subscribe(r),r.closed||(u=o.connect())})}export{refCount};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnQudHMiXSwibmFtZXMiOlsib3BlcmF0ZSIsImNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciIsInJlZkNvdW50Iiwic291cmNlIiwic3Vic2NyaWJlciIsImxldCIsImNvbm5lY3Rpb24iLCJfcmVmQ291bnQiLCJyZWZDb3VudGVyIiwidW5kZWZpbmVkIiwic2hhcmVkQ29ubmVjdGlvbiIsImNvbm4iLCJfY29ubmVjdGlvbiIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlIiwiY2xvc2VkIiwiY29ubmVjdCJdLCJtYXBwaW5ncyI6Ik9BR1NBLE9BQTZCLEtBQWQsc0JBQ2ZDLHdCQUFzRCxLQUF0Qix1QkE0RG5DLFNBQVVDLFdBQ2QsT0FBT0YsUUFBUSxDQUFDRyxFQUFRQyxLQUN0QkMsSUFBSUMsRUFBa0MsS0FFckNILEVBQWVJLFNBQVMsR0FFekIsSUFBTUMsRUFBYVAseUJBQXlCRyxFQUFZSyxLQUFBQSxFQUFXQSxLQUFBQSxFQUFXQSxLQUFBQSxFQUFXLEtBQ3ZGLElBOEJNQyxFQUNBQyxFQS9CRixDQUFDUixHQUFXQSxFQUFlSSxXQUFhLEdBQUssRUFBSSxFQUFHSixFQUFlSSxVQUNyRUQsRUFBYSxNQTZCVEksRUFBb0JQLEVBQWVTLFlBQ25DRCxFQUFPTCxFQUNiQSxFQUFhLEtBRVRJLENBQUFBLEdBQXNCQyxHQUFRRCxJQUFxQkMsR0FDckRELEVBQWlCRyxZQUFXLEVBRzlCVCxFQUFXUyxZQUFXLEVBQ3hCLENBQUMsRUFFRFYsRUFBT1csVUFBVU4sQ0FBVSxFQUV0QkEsRUFBV08sU0FDZFQsRUFBY0gsRUFBb0NhLFFBQU8sRUFFN0QsQ0FBQyxDQUNILFFBdERnQmQsUUFzRGhCIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0YWJsZU9ic2VydmFibGUgfSBmcm9tICcuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgTW9ub1R5cGVPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5cbi8qKlxuICogTWFrZSBhIHtAbGluayBDb25uZWN0YWJsZU9ic2VydmFibGV9IGJlaGF2ZSBsaWtlIGEgb3JkaW5hcnkgb2JzZXJ2YWJsZSBhbmQgYXV0b21hdGVzIHRoZSB3YXlcbiAqIHlvdSBjYW4gY29ubmVjdCB0byBpdC5cbiAqXG4gKiBJbnRlcm5hbGx5IGl0IGNvdW50cyB0aGUgc3Vic2NyaXB0aW9ucyB0byB0aGUgb2JzZXJ2YWJsZSBhbmQgc3Vic2NyaWJlcyAob25seSBvbmNlKSB0byB0aGUgc291cmNlIGlmXG4gKiB0aGUgbnVtYmVyIG9mIHN1YnNjcmlwdGlvbnMgaXMgbGFyZ2VyIHRoYW4gMC4gSWYgdGhlIG51bWJlciBvZiBzdWJzY3JpcHRpb25zIGlzIHNtYWxsZXIgdGhhbiAxLCBpdFxuICogdW5zdWJzY3JpYmVzIGZyb20gdGhlIHNvdXJjZS4gVGhpcyB3YXkgeW91IGNhbiBtYWtlIHN1cmUgdGhhdCBldmVyeXRoaW5nIGJlZm9yZSB0aGUgKnB1Ymxpc2hlZCpcbiAqIHJlZkNvdW50IGhhcyBvbmx5IGEgc2luZ2xlIHN1YnNjcmlwdGlvbiBpbmRlcGVuZGVudGx5IG9mIHRoZSBudW1iZXIgb2Ygc3Vic2NyaWJlcnMgdG8gdGhlIHRhcmdldFxuICogb2JzZXJ2YWJsZS5cbiAqXG4gKiBOb3RlIHRoYXQgdXNpbmcgdGhlIHtAbGluayBzaGFyZX0gb3BlcmF0b3IgaXMgZXhhY3RseSB0aGUgc2FtZSBhcyB1c2luZyB0aGUgYG11bHRpY2FzdCgoKSA9PiBuZXcgU3ViamVjdCgpKWAgb3BlcmF0b3JcbiAqIChtYWtpbmcgdGhlIG9ic2VydmFibGUgaG90KSBhbmQgdGhlICpyZWZDb3VudCogb3BlcmF0b3IgaW4gYSBzZXF1ZW5jZS5cbiAqXG4gKiAhW10ocmVmQ291bnQucG5nKVxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgdGhlcmUgYXJlIHR3byBpbnRlcnZhbHMgdHVybmVkIGludG8gY29ubmVjdGFibGUgb2JzZXJ2YWJsZXNcbiAqIGJ5IHVzaW5nIHRoZSAqcHVibGlzaCogb3BlcmF0b3IuIFRoZSBmaXJzdCBvbmUgdXNlcyB0aGUgKnJlZkNvdW50KiBvcGVyYXRvciwgdGhlXG4gKiBzZWNvbmQgb25lIGRvZXMgbm90IHVzZSBpdC4gWW91IHdpbGwgbm90aWNlIHRoYXQgYSBjb25uZWN0YWJsZSBvYnNlcnZhYmxlIGRvZXMgbm90aGluZ1xuICogdW50aWwgeW91IGNhbGwgaXRzIGNvbm5lY3QgZnVuY3Rpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IGludGVydmFsLCB0YXAsIHB1Ymxpc2gsIHJlZkNvdW50IH0gZnJvbSAncnhqcyc7XG4gKlxuICogLy8gVHVybiB0aGUgaW50ZXJ2YWwgb2JzZXJ2YWJsZSBpbnRvIGEgQ29ubmVjdGFibGVPYnNlcnZhYmxlIChob3QpXG4gKiBjb25zdCByZWZDb3VudEludGVydmFsID0gaW50ZXJ2YWwoNDAwKS5waXBlKFxuICogICB0YXAobnVtID0+IGNvbnNvbGUubG9nKGByZWZDb3VudCAkeyBudW0gfWApKSxcbiAqICAgcHVibGlzaCgpLFxuICogICByZWZDb3VudCgpXG4gKiApO1xuICpcbiAqIGNvbnN0IHB1Ymxpc2hlZEludGVydmFsID0gaW50ZXJ2YWwoNDAwKS5waXBlKFxuICogICB0YXAobnVtID0+IGNvbnNvbGUubG9nKGBwdWJsaXNoICR7IG51bSB9YCkpLFxuICogICBwdWJsaXNoKClcbiAqICk7XG4gKlxuICogcmVmQ291bnRJbnRlcnZhbC5zdWJzY3JpYmUoKTtcbiAqIHJlZkNvdW50SW50ZXJ2YWwuc3Vic2NyaWJlKCk7XG4gKiAvLyAncmVmQ291bnQgMCcgLS0tLS0+ICdyZWZDb3VudCAxJyAtLS0tLT4gZXRjXG4gKiAvLyBBbGwgc3Vic2NyaXB0aW9ucyB3aWxsIHJlY2VpdmUgdGhlIHNhbWUgdmFsdWUgYW5kIHRoZSB0YXAgKGFuZFxuICogLy8gZXZlcnkgb3RoZXIgb3BlcmF0b3IpIGJlZm9yZSB0aGUgYHB1Ymxpc2hgIG9wZXJhdG9yIHdpbGwgYmUgZXhlY3V0ZWRcbiAqIC8vIG9ubHkgb25jZSBwZXIgZXZlbnQgaW5kZXBlbmRlbnRseSBvZiB0aGUgbnVtYmVyIG9mIHN1YnNjcmlwdGlvbnMuXG4gKlxuICogcHVibGlzaGVkSW50ZXJ2YWwuc3Vic2NyaWJlKCk7XG4gKiAvLyBOb3RoaW5nIGhhcHBlbnMgdW50aWwgeW91IGNhbGwgLmNvbm5lY3QoKSBvbiB0aGUgb2JzZXJ2YWJsZS5cbiAqIGBgYFxuICpcbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGF1dG9tYXRlcyB0aGUgY29ubmVjdGlvblxuICogdG8gQ29ubmVjdGFibGVPYnNlcnZhYmxlLlxuICogQHNlZSB7QGxpbmsgQ29ubmVjdGFibGVPYnNlcnZhYmxlfVxuICogQHNlZSB7QGxpbmsgc2hhcmV9XG4gKiBAc2VlIHtAbGluayBwdWJsaXNofVxuICogQGRlcHJlY2F0ZWQgUmVwbGFjZWQgd2l0aCB0aGUge0BsaW5rIHNoYXJlfSBvcGVyYXRvci4gSG93IGBzaGFyZWAgaXMgdXNlZFxuICogd2lsbCBkZXBlbmQgb24gdGhlIGNvbm5lY3RhYmxlIG9ic2VydmFibGUgeW91IGNyZWF0ZWQganVzdCBwcmlvciB0byB0aGVcbiAqIGByZWZDb3VudGAgb3BlcmF0b3IuXG4gKiBEZXRhaWxzOiBodHRwczovL3J4anMuZGV2L2RlcHJlY2F0aW9ucy9tdWx0aWNhc3RpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZkNvdW50PFQ+KCk6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gIHJldHVybiBvcGVyYXRlKChzb3VyY2UsIHN1YnNjcmliZXIpID0+IHtcbiAgICBsZXQgY29ubmVjdGlvbjogU3Vic2NyaXB0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgICAoc291cmNlIGFzIGFueSkuX3JlZkNvdW50Kys7XG5cbiAgICBjb25zdCByZWZDb3VudGVyID0gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsICgpID0+IHtcbiAgICAgIGlmICghc291cmNlIHx8IChzb3VyY2UgYXMgYW55KS5fcmVmQ291bnQgPD0gMCB8fCAwIDwgLS0oc291cmNlIGFzIGFueSkuX3JlZkNvdW50KSB7XG4gICAgICAgIGNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vL1xuICAgICAgLy8gQ29tcGFyZSB0aGUgbG9jYWwgUmVmQ291bnRTdWJzY3JpYmVyJ3MgY29ubmVjdGlvbiBTdWJzY3JpcHRpb24gdG8gdGhlXG4gICAgICAvLyBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbiBvbiB0aGUgc2hhcmVkIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS4gSW4gY2FzZXNcbiAgICAgIC8vIHdoZXJlIHRoZSBDb25uZWN0YWJsZU9ic2VydmFibGUgc291cmNlIHN5bmNocm9ub3VzbHkgZW1pdHMgdmFsdWVzLCBhbmRcbiAgICAgIC8vIHRoZSBSZWZDb3VudFN1YnNjcmliZXIncyBkb3duc3RyZWFtIE9ic2VydmVycyBzeW5jaHJvbm91c2x5IHVuc3Vic2NyaWJlLFxuICAgICAgLy8gZXhlY3V0aW9uIGNvbnRpbnVlcyB0byBoZXJlIGJlZm9yZSB0aGUgUmVmQ291bnRPcGVyYXRvciBoYXMgYSBjaGFuY2UgdG9cbiAgICAgIC8vIHN1cHBseSB0aGUgUmVmQ291bnRTdWJzY3JpYmVyIHdpdGggdGhlIHNoYXJlZCBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbi5cbiAgICAgIC8vIEZvciBleGFtcGxlOlxuICAgICAgLy8gYGBgXG4gICAgICAvLyByYW5nZSgwLCAxMCkucGlwZShcbiAgICAgIC8vICAgcHVibGlzaCgpLFxuICAgICAgLy8gICByZWZDb3VudCgpLFxuICAgICAgLy8gICB0YWtlKDUpLFxuICAgICAgLy8gKVxuICAgICAgLy8gLnN1YnNjcmliZSgpO1xuICAgICAgLy8gYGBgXG4gICAgICAvLyBJbiBvcmRlciB0byBhY2NvdW50IGZvciB0aGlzIGNhc2UsIFJlZkNvdW50U3Vic2NyaWJlciBzaG91bGQgb25seSBkaXNwb3NlXG4gICAgICAvLyB0aGUgQ29ubmVjdGFibGVPYnNlcnZhYmxlJ3Mgc2hhcmVkIGNvbm5lY3Rpb24gU3Vic2NyaXB0aW9uIGlmIHRoZVxuICAgICAgLy8gY29ubmVjdGlvbiBTdWJzY3JpcHRpb24gZXhpc3RzLCAqYW5kKiBlaXRoZXI6XG4gICAgICAvLyAgIGEuIFJlZkNvdW50U3Vic2NyaWJlciBkb2Vzbid0IGhhdmUgYSByZWZlcmVuY2UgdG8gdGhlIHNoYXJlZCBjb25uZWN0aW9uXG4gICAgICAvLyAgICAgIFN1YnNjcmlwdGlvbiB5ZXQsIG9yLFxuICAgICAgLy8gICBiLiBSZWZDb3VudFN1YnNjcmliZXIncyBjb25uZWN0aW9uIFN1YnNjcmlwdGlvbiByZWZlcmVuY2UgaXMgaWRlbnRpY2FsXG4gICAgICAvLyAgICAgIHRvIHRoZSBzaGFyZWQgY29ubmVjdGlvbiBTdWJzY3JpcHRpb25cbiAgICAgIC8vL1xuXG4gICAgICBjb25zdCBzaGFyZWRDb25uZWN0aW9uID0gKHNvdXJjZSBhcyBhbnkpLl9jb25uZWN0aW9uO1xuICAgICAgY29uc3QgY29ubiA9IGNvbm5lY3Rpb247XG4gICAgICBjb25uZWN0aW9uID0gbnVsbDtcblxuICAgICAgaWYgKHNoYXJlZENvbm5lY3Rpb24gJiYgKCFjb25uIHx8IHNoYXJlZENvbm5lY3Rpb24gPT09IGNvbm4pKSB7XG4gICAgICAgIHNoYXJlZENvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cblxuICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgIH0pO1xuXG4gICAgc291cmNlLnN1YnNjcmliZShyZWZDb3VudGVyKTtcblxuICAgIGlmICghcmVmQ291bnRlci5jbG9zZWQpIHtcbiAgICAgIGNvbm5lY3Rpb24gPSAoc291cmNlIGFzIENvbm5lY3RhYmxlT2JzZXJ2YWJsZTxUPikuY29ubmVjdCgpO1xuICAgIH1cbiAgfSk7XG59XG4iXX0=
