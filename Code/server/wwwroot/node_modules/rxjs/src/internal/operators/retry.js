import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{identity}from"../util/identity";import{timer}from"../observable/timer";import{innerFrom}from"../observable/innerFrom";function retry(e=1/0){let r,{count:s=1/0,delay:l,resetOnSuccess:t=!1}=r=e&&"object"==typeof e?e:{count:e};return s<=0?identity:operate((r,o)=>{let b=0,n,u=()=>{let e=!1;n=r.subscribe(createOperatorSubscriber(o,e=>{t&&(b=0),o.next(e)},void 0,t=>{if(b++<s){let r=()=>{n?(n.unsubscribe(),n=null,u()):e=!0};if(null!=l){var i="number"==typeof l?timer(l):innerFrom(l(t,b));let e=createOperatorSubscriber(o,()=>{e.unsubscribe(),r()},()=>{o.complete()});i.subscribe(e)}else r()}else o.error(t)})),e&&(n.unsubscribe(),n=null,u())};u()})}export{retry};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
