import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{innerFrom}from"../observable/innerFrom";import{identity}from"../util/identity";import{noop}from"../util/noop";import{popResultSelector}from"../util/args";function withLatestFrom(...m){let e=popResultSelector(m);return operate((r,t)=>{var o=m.length;let i=new Array(o),p=m.map(()=>!1),n=!1;for(let e=0;e<o;e++)innerFrom(m[e]).subscribe(createOperatorSubscriber(t,r=>{i[e]=r,!n&&!p[e]&&(p[e]=!0,n=p.every(identity))&&(p=null)},noop));r.subscribe(createOperatorSubscriber(t,r=>{n&&(r=[r,...i],t.next(e?e(...r):r))}))})}export{withLatestFrom};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
