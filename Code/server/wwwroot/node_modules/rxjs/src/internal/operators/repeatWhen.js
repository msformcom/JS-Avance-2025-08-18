import{innerFrom}from"../observable/innerFrom";import{Subject}from"../Subject";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function repeatWhen(a){return operate((r,e)=>{let t,o=!1,b,i=!1,c=!1,n=()=>c&&i&&(e.complete(),!0),u=()=>(b||(b=new Subject,innerFrom(a(b)).subscribe(createOperatorSubscriber(e,()=>{t?p():o=!0},()=>{i=!0,n()}))),b),p=()=>{c=!1,t=r.subscribe(createOperatorSubscriber(e,void 0,()=>{c=!0,n()||u().next()})),o&&(t.unsubscribe(),t=null,o=!1,p())};p()})}export{repeatWhen};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
