import{argsOrArgArray}from"../util/argsOrArgArray";import{onErrorResumeNext as oERNCreate}from"../observable/onErrorResumeNext";function onErrorResumeNextWith(...r){let e=argsOrArgArray(r);return r=>oERNCreate(r,...e)}let onErrorResumeNext=onErrorResumeNextWith;export{onErrorResumeNextWith,onErrorResumeNext};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvb25FcnJvclJlc3VtZU5leHRXaXRoLnRzIl0sIm5hbWVzIjpbImFyZ3NPckFyZ0FycmF5Iiwib0VSTkNyZWF0ZSIsIm9uRXJyb3JSZXN1bWVOZXh0V2l0aCIsInNvdXJjZXMiLCJuZXh0U291cmNlcyIsInNvdXJjZSIsIm9uRXJyb3JSZXN1bWVOZXh0Il0sIm1hcHBpbmdzIjoiT0FDU0EsY0FBOEMsS0FBeEIsZ0NBQ0RDLCtCQUFtRCxLQUFqQyxrQ0FpRjFDLFNBQVVDLHlCQUNYQyxHQU1ILElBQU1DLEVBQWNKLGVBQWVHLENBQU8sRUFFMUMsT0FBTyxHQUFZRixXQUFXSSxFQUFRLEdBQUdELENBQVcsQ0FDdEQsQ0FLTyxJQUFNRSxrQkFBb0JKLDZCQWZqQkEsc0JBZUhJLGlCQUF5QyIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL29uRXJyb3JSZXN1bWVOZXh0V2l0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGVJbnB1dFR1cGxlLCBPcGVyYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgYXJnc09yQXJnQXJyYXkgfSBmcm9tICcuLi91dGlsL2FyZ3NPckFyZ0FycmF5JztcbmltcG9ydCB7IG9uRXJyb3JSZXN1bWVOZXh0IGFzIG9FUk5DcmVhdGUgfSBmcm9tICcuLi9vYnNlcnZhYmxlL29uRXJyb3JSZXN1bWVOZXh0JztcblxuZXhwb3J0IGZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0V2l0aDxULCBBIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdPihcbiAgc291cmNlczogWy4uLk9ic2VydmFibGVJbnB1dFR1cGxlPEE+XVxuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUIHwgQVtudW1iZXJdPjtcbmV4cG9ydCBmdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dFdpdGg8VCwgQSBleHRlbmRzIHJlYWRvbmx5IHVua25vd25bXT4oXG4gIC4uLnNvdXJjZXM6IFsuLi5PYnNlcnZhYmxlSW5wdXRUdXBsZTxBPl1cbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IEFbbnVtYmVyXT47XG5cbi8qKlxuICogV2hlbiBhbnkgb2YgdGhlIHByb3ZpZGVkIE9ic2VydmFibGUgZW1pdHMgYW4gY29tcGxldGUgb3IgZXJyb3Igbm90aWZpY2F0aW9uLCBpdCBpbW1lZGlhdGVseSBzdWJzY3JpYmVzIHRvIHRoZSBuZXh0IG9uZVxuICogdGhhdCB3YXMgcGFzc2VkLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5FeGVjdXRlIHNlcmllcyBvZiBPYnNlcnZhYmxlcywgc3Vic2NyaWJlcyB0byBuZXh0IG9uZSBvbiBlcnJvciBvciBjb21wbGV0ZS48L3NwYW4+XG4gKlxuICogIVtdKG9uRXJyb3JSZXN1bWVOZXh0LnBuZylcbiAqXG4gKiBgb25FcnJvclJlc3VtZU5leHRgIGlzIGFuIG9wZXJhdG9yIHRoYXQgYWNjZXB0cyBhIHNlcmllcyBvZiBPYnNlcnZhYmxlcywgcHJvdmlkZWQgZWl0aGVyIGRpcmVjdGx5IGFzXG4gKiBhcmd1bWVudHMgb3IgYXMgYW4gYXJyYXkuIElmIG5vIHNpbmdsZSBPYnNlcnZhYmxlIGlzIHByb3ZpZGVkLCByZXR1cm5lZCBPYnNlcnZhYmxlIHdpbGwgc2ltcGx5IGJlaGF2ZSB0aGUgc2FtZVxuICogYXMgdGhlIHNvdXJjZS5cbiAqXG4gKiBgb25FcnJvclJlc3VtZU5leHRgIHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IHN0YXJ0cyBieSBzdWJzY3JpYmluZyBhbmQgcmUtZW1pdHRpbmcgdmFsdWVzIGZyb20gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICogV2hlbiBpdHMgc3RyZWFtIG9mIHZhbHVlcyBlbmRzIC0gbm8gbWF0dGVyIGlmIE9ic2VydmFibGUgY29tcGxldGVkIG9yIGVtaXR0ZWQgYW4gZXJyb3IgLSBgb25FcnJvclJlc3VtZU5leHRgXG4gKiB3aWxsIHN1YnNjcmliZSB0byB0aGUgZmlyc3QgT2JzZXJ2YWJsZSB0aGF0IHdhcyBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIG1ldGhvZC4gSXQgd2lsbCBzdGFydCByZS1lbWl0dGluZ1xuICogaXRzIHZhbHVlcyBhcyB3ZWxsIGFuZCAtIGFnYWluIC0gd2hlbiB0aGF0IHN0cmVhbSBlbmRzLCBgb25FcnJvclJlc3VtZU5leHRgIHdpbGwgcHJvY2VlZCB0byBzdWJzY3JpYmluZyB5ZXQgYW5vdGhlclxuICogT2JzZXJ2YWJsZSBpbiBwcm92aWRlZCBzZXJpZXMsIG5vIG1hdHRlciBpZiBwcmV2aW91cyBPYnNlcnZhYmxlIGNvbXBsZXRlZCBvciBlbmRlZCB3aXRoIGFuIGVycm9yLiBUaGlzIHdpbGxcbiAqIGJlIGhhcHBlbmluZyB1bnRpbCB0aGVyZSBpcyBubyBtb3JlIE9ic2VydmFibGVzIGxlZnQgaW4gdGhlIHNlcmllcywgYXQgd2hpY2ggcG9pbnQgcmV0dXJuZWQgT2JzZXJ2YWJsZSB3aWxsXG4gKiBjb21wbGV0ZSAtIGV2ZW4gaWYgdGhlIGxhc3Qgc3Vic2NyaWJlZCBzdHJlYW0gZW5kZWQgd2l0aCBhbiBlcnJvci5cbiAqXG4gKiBgb25FcnJvclJlc3VtZU5leHRgIGNhbiBiZSB0aGVyZWZvcmUgdGhvdWdodCBvZiBhcyB2ZXJzaW9uIG9mIHtAbGluayBjb25jYXR9IG9wZXJhdG9yLCB3aGljaCBpcyBtb3JlIHBlcm1pc3NpdmVcbiAqIHdoZW4gaXQgY29tZXMgdG8gdGhlIGVycm9ycyBlbWl0dGVkIGJ5IGl0cyBpbnB1dCBPYnNlcnZhYmxlcy4gV2hpbGUgYGNvbmNhdGAgc3Vic2NyaWJlcyB0byB0aGUgbmV4dCBPYnNlcnZhYmxlXG4gKiBpbiBzZXJpZXMgb25seSBpZiBwcmV2aW91cyBvbmUgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZCwgYG9uRXJyb3JSZXN1bWVOZXh0YCBzdWJzY3JpYmVzIGV2ZW4gaWYgaXQgZW5kZWQgd2l0aFxuICogYW4gZXJyb3IuXG4gKlxuICogTm90ZSB0aGF0IHlvdSBkbyBub3QgZ2V0IGFueSBhY2Nlc3MgdG8gZXJyb3JzIGVtaXR0ZWQgYnkgdGhlIE9ic2VydmFibGVzLiBJbiBwYXJ0aWN1bGFyIGRvIG5vdFxuICogZXhwZWN0IHRoZXNlIGVycm9ycyB0byBhcHBlYXIgaW4gZXJyb3IgY2FsbGJhY2sgcGFzc2VkIHRvIHtAbGluayBPYnNlcnZhYmxlI3N1YnNjcmliZX0uIElmIHlvdSB3YW50IHRvIHRha2VcbiAqIHNwZWNpZmljIGFjdGlvbnMgYmFzZWQgb24gd2hhdCBlcnJvciB3YXMgZW1pdHRlZCBieSBhbiBPYnNlcnZhYmxlLCB5b3Ugc2hvdWxkIHRyeSBvdXQge0BsaW5rIGNhdGNoRXJyb3J9IGluc3RlYWQuXG4gKlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBTdWJzY3JpYmUgdG8gdGhlIG5leHQgT2JzZXJ2YWJsZSBhZnRlciBtYXAgZmFpbHNcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgb2YsIG9uRXJyb3JSZXN1bWVOZXh0LCBtYXAgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBvZigxLCAyLCAzLCAwKVxuICogICAucGlwZShcbiAqICAgICBtYXAoeCA9PiB7XG4gKiAgICAgICBpZiAoeCA9PT0gMCkge1xuICogICAgICAgICB0aHJvdyBFcnJvcigpO1xuICogICAgICAgfVxuICpcbiAqICAgICAgIHJldHVybiAxMCAvIHg7XG4gKiAgICAgfSksXG4gKiAgICAgb25FcnJvclJlc3VtZU5leHQob2YoMSwgMiwgMykpXG4gKiAgIClcbiAqICAgLnN1YnNjcmliZSh7XG4gKiAgICAgbmV4dDogdmFsID0+IGNvbnNvbGUubG9nKHZhbCksXG4gKiAgICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmxvZyhlcnIpLCAgICAgICAgICAvLyBXaWxsIG5ldmVyIGJlIGNhbGxlZC5cbiAqICAgICBjb21wbGV0ZTogKCkgPT4gY29uc29sZS5sb2coJ3RoYXRcXCdzIGl0IScpXG4gKiAgIH0pO1xuICpcbiAqIC8vIExvZ3M6XG4gKiAvLyAxMFxuICogLy8gNVxuICogLy8gMy4zMzMzMzMzMzMzMzMzMzM1XG4gKiAvLyAxXG4gKiAvLyAyXG4gKiAvLyAzXG4gKiAvLyAndGhhdCdzIGl0ISdcbiAqIGBgYFxuICpcbiAqIEBzZWUge0BsaW5rIGNvbmNhdH1cbiAqIEBzZWUge0BsaW5rIGNhdGNoRXJyb3J9XG4gKlxuICogQHBhcmFtIHNvdXJjZXMgYE9ic2VydmFibGVJbnB1dGBzIHBhc3NlZCBlaXRoZXIgZGlyZWN0bHkgb3IgYXMgYW4gYXJyYXkuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBlbWl0cyB2YWx1ZXMgZnJvbSBzb3VyY2VcbiAqIE9ic2VydmFibGUsIGJ1dCAtIGlmIGl0IGVycm9ycyAtIHN1YnNjcmliZXMgdG8gdGhlIG5leHQgcGFzc2VkIE9ic2VydmFibGVcbiAqIGFuZCBzbyBvbiwgdW50aWwgaXQgY29tcGxldGVzIG9yIHJ1bnMgb3V0IG9mIE9ic2VydmFibGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHRXaXRoPFQsIEEgZXh0ZW5kcyByZWFkb25seSB1bmtub3duW10+KFxuICAuLi5zb3VyY2VzOiBbWy4uLk9ic2VydmFibGVJbnB1dFR1cGxlPEE+XV0gfCBbLi4uT2JzZXJ2YWJsZUlucHV0VHVwbGU8QT5dXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIFQgfCBBW251bWJlcl0+IHtcbiAgLy8gRm9yIHNvbWUgcmVhc29uLCBUUyA0LjEgUkMgZ2V0cyB0aGUgaW5mZXJlbmNlIHdyb25nIGhlcmUgYW5kIGluZmVycyB0aGVcbiAgLy8gcmVzdWx0IHRvIGJlIGBBW251bWJlcl1bXWAgLSBjb21wbGV0ZWx5IGRyb3BwaW5nIHRoZSBPYnNlcnZhYmxlSW5wdXQgcGFydFxuICAvLyBvZiB0aGUgdHlwZS4gVGhpcyBtYWtlcyBubyBzZW5zZSB3aGF0c29ldmVyLiBBcyBhIHdvcmthcm91bmQsIHRoZSB0eXBlIGlzXG4gIC8vIGFzc2VydGVkIGV4cGxpY2l0bHkuXG4gIGNvbnN0IG5leHRTb3VyY2VzID0gYXJnc09yQXJnQXJyYXkoc291cmNlcykgYXMgdW5rbm93biBhcyBPYnNlcnZhYmxlSW5wdXRUdXBsZTxBPjtcblxuICByZXR1cm4gKHNvdXJjZSkgPT4gb0VSTkNyZWF0ZShzb3VyY2UsIC4uLm5leHRTb3VyY2VzKTtcbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBSZW5hbWVkLiBVc2Uge0BsaW5rIG9uRXJyb3JSZXN1bWVOZXh0V2l0aH0gaW5zdGVhZC4gV2lsbCBiZSByZW1vdmVkIGluIHY4LlxuICovXG5leHBvcnQgY29uc3Qgb25FcnJvclJlc3VtZU5leHQgPSBvbkVycm9yUmVzdW1lTmV4dFdpdGg7XG4iXX0=
