import{EMPTY}from"../observable/empty";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function takeLast(o){return o<=0?()=>EMPTY:operate((r,e)=>{let t=[];r.subscribe(createOperatorSubscriber(e,r=>{t.push(r),o<t.length&&t.shift()},()=>{for(var r of t)e.next(r);e.complete()},void 0,()=>{t=null}))})}export{takeLast};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZUxhc3QudHMiXSwibmFtZXMiOlsiRU1QVFkiLCJvcGVyYXRlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwidGFrZUxhc3QiLCJjb3VudCIsInNvdXJjZSIsInN1YnNjcmliZXIiLCJsZXQiLCJidWZmZXIiLCJzdWJzY3JpYmUiLCJwdXNoIiwidmFsdWUiLCJsZW5ndGgiLCJzaGlmdCIsIm5leHQiLCJjb21wbGV0ZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ik9BQVNBLEtBQWtDLEtBQXJCLDZCQUViQyxPQUE2QixLQUFkLHNCQUNmQyx3QkFBc0QsS0FBdEIsdUJBeUNuQyxTQUFVQyxTQUFZQyxHQUMxQixPQUFPQSxHQUFTLEVBQ1osSUFBTUosTUFDTkMsUUFBUSxDQUFDSSxFQUFRQyxLQUtmQyxJQUFJQyxFQUFjLEdBQ2xCSCxFQUFPSSxVQUNMUCx5QkFDRUksRUFDQSxJQUVFRSxFQUFPRSxLQUFLQyxDQUFLLEVBR2pCUCxFQUFRSSxFQUFPSSxRQUFVSixFQUFPSyxNQUFLLENBQ3ZDLEVBQ0EsS0FHRSxJQUFLLElBQU1GLEtBQVNILEVBQ2xCRixFQUFXUSxLQUFLSCxDQUFLLEVBRXZCTCxFQUFXUyxTQUFRLENBQ3JCLEVBRUFDLEtBQUFBLEVBQ0EsS0FFRVIsRUFBUyxJQUNYLENBQUMsQ0FDRixDQUVMLENBQUMsQ0FDUCxRQXBDZ0JMLFFBb0NoQiIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRU1QVFkgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtcHR5JztcbmltcG9ydCB7IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuXG4vKipcbiAqIFdhaXRzIGZvciB0aGUgc291cmNlIHRvIGNvbXBsZXRlLCB0aGVuIGVtaXRzIHRoZSBsYXN0IE4gdmFsdWVzIGZyb20gdGhlIHNvdXJjZSxcbiAqIGFzIHNwZWNpZmllZCBieSB0aGUgYGNvdW50YCBhcmd1bWVudC5cbiAqXG4gKiAhW10odGFrZUxhc3QucG5nKVxuICpcbiAqIGB0YWtlTGFzdGAgcmVzdWx0cyBpbiBhbiBvYnNlcnZhYmxlIHRoYXQgd2lsbCBob2xkIHZhbHVlcyB1cCB0byBgY291bnRgIHZhbHVlcyBpbiBtZW1vcnksXG4gKiB1bnRpbCB0aGUgc291cmNlIGNvbXBsZXRlcy4gSXQgdGhlbiBwdXNoZXMgYWxsIHZhbHVlcyBpbiBtZW1vcnkgdG8gdGhlIGNvbnN1bWVyLCBpbiB0aGVcbiAqIG9yZGVyIHRoZXkgd2VyZSByZWNlaXZlZCBmcm9tIHRoZSBzb3VyY2UsIHRoZW4gbm90aWZpZXMgdGhlIGNvbnN1bWVyIHRoYXQgaXQgaXNcbiAqIGNvbXBsZXRlLlxuICpcbiAqIElmIGZvciBzb21lIHJlYXNvbiB0aGUgc291cmNlIGNvbXBsZXRlcyBiZWZvcmUgdGhlIGBjb3VudGAgc3VwcGxpZWQgdG8gYHRha2VMYXN0YCBpcyByZWFjaGVkLFxuICogYWxsIHZhbHVlcyByZWNlaXZlZCB1bnRpbCB0aGF0IHBvaW50IGFyZSBlbWl0dGVkLCBhbmQgdGhlbiBjb21wbGV0aW9uIGlzIG5vdGlmaWVkLlxuICpcbiAqICoqV2FybmluZyoqOiBVc2luZyBgdGFrZUxhc3RgIHdpdGggYW4gb2JzZXJ2YWJsZSB0aGF0IG5ldmVyIGNvbXBsZXRlcyB3aWxsIHJlc3VsdFxuICogaW4gYW4gb2JzZXJ2YWJsZSB0aGF0IG5ldmVyIGVtaXRzIGEgdmFsdWUuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIFRha2UgdGhlIGxhc3QgMyB2YWx1ZXMgb2YgYW4gT2JzZXJ2YWJsZSB3aXRoIG1hbnkgdmFsdWVzXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IHJhbmdlLCB0YWtlTGFzdCB9IGZyb20gJ3J4anMnO1xuICpcbiAqIGNvbnN0IG1hbnkgPSByYW5nZSgxLCAxMDApO1xuICogY29uc3QgbGFzdFRocmVlID0gbWFueS5waXBlKHRha2VMYXN0KDMpKTtcbiAqIGxhc3RUaHJlZS5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayB0YWtlfVxuICogQHNlZSB7QGxpbmsgdGFrZVVudGlsfVxuICogQHNlZSB7QGxpbmsgdGFrZVdoaWxlfVxuICogQHNlZSB7QGxpbmsgc2tpcH1cbiAqXG4gKiBAcGFyYW0gY291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIHZhbHVlcyB0byBlbWl0IGZyb20gdGhlIGVuZCBvZlxuICogdGhlIHNlcXVlbmNlIG9mIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSBzb3VyY2UgT2JzZXJ2YWJsZS5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGF0IG1vc3QgdGhlIGxhc3RcbiAqIGBjb3VudGAgdmFsdWVzIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFrZUxhc3Q8VD4oY291bnQ6IG51bWJlcik6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gIHJldHVybiBjb3VudCA8PSAwXG4gICAgPyAoKSA9PiBFTVBUWVxuICAgIDogb3BlcmF0ZSgoc291cmNlLCBzdWJzY3JpYmVyKSA9PiB7XG4gICAgICAgIC8vIFRoaXMgYnVmZmVyIHdpbGwgaG9sZCB0aGUgdmFsdWVzIHdlIGFyZSBnb2luZyB0byBlbWl0XG4gICAgICAgIC8vIHdoZW4gdGhlIHNvdXJjZSBjb21wbGV0ZXMuIFNpbmNlIHdlIG9ubHkgd2FudCB0byB0YWtlIHRoZVxuICAgICAgICAvLyBsYXN0IE4gdmFsdWVzLCB3ZSBjYW4ndCBlbWl0IHVudGlsIHdlJ3JlIHN1cmUgd2UncmUgbm90IGdldHRpbmdcbiAgICAgICAgLy8gYW55IG1vcmUgdmFsdWVzLlxuICAgICAgICBsZXQgYnVmZmVyOiBUW10gPSBbXTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShcbiAgICAgICAgICBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoXG4gICAgICAgICAgICBzdWJzY3JpYmVyLFxuICAgICAgICAgICAgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIC8vIEFkZCB0aGUgbW9zdCByZWNlbnQgdmFsdWUgb250byB0aGUgZW5kIG9mIG91ciBidWZmZXIuXG4gICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgLy8gSWYgb3VyIGJ1ZmZlciBpcyBub3cgbGFyZ2VyIHRoYW4gdGhlIG51bWJlciBvZiB2YWx1ZXMgd2VcbiAgICAgICAgICAgICAgLy8gd2FudCB0byB0YWtlLCB3ZSByZW1vdmUgdGhlIG9sZGVzdCB2YWx1ZSBmcm9tIHRoZSBidWZmZXIuXG4gICAgICAgICAgICAgIGNvdW50IDwgYnVmZmVyLmxlbmd0aCAmJiBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIFRoZSBzb3VyY2UgY29tcGxldGVkLCB3ZSBub3cga25vdyB3aGF0IGFyZSBsYXN0IHZhbHVlc1xuICAgICAgICAgICAgICAvLyBhcmUsIGVtaXQgdGhlbSBpbiB0aGUgb3JkZXIgdGhleSB3ZXJlIHJlY2VpdmVkLlxuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIGJ1ZmZlcikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIEVycm9ycyBhcmUgcGFzc2VkIHRocm91Z2ggdG8gdGhlIGNvbnN1bWVyXG4gICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIER1cmluZyBmaW5hbGl6YXRpb24gcmVsZWFzZSB0aGUgdmFsdWVzIGluIG91ciBidWZmZXIuXG4gICAgICAgICAgICAgIGJ1ZmZlciA9IG51bGwhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH0pO1xufVxuIl19
