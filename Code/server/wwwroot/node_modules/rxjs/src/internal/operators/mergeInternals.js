import{innerFrom}from"../observable/innerFrom";import{executeSchedule}from"../util/executeSchedule";import{createOperatorSubscriber}from"./OperatorSubscriber";function mergeInternals(e,t,o,c,i,n,u,r){let b=[],l=0,s=0,m=!1,a=()=>{!m||b.length||l||t.complete()},p=e=>l<c?h(e):b.push(e),h=e=>{n&&t.next(e),l++;let r=!1;innerFrom(o(e,s++)).subscribe(createOperatorSubscriber(t,e=>{i?.(e),n?p(e):t.next(e)},()=>{r=!0},void 0,()=>{if(r)try{for(l--;b.length&&l<c;){let e=b.shift();u?executeSchedule(t,u,()=>h(e)):h(e)}a()}catch(e){t.error(e)}}))};return e.subscribe(createOperatorSubscriber(t,p,()=>{m=!0,a()})),()=>{r?.()}}export{mergeInternals};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
