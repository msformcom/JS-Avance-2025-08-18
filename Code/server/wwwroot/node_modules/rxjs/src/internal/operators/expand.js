import{operate}from"../util/lift";import{mergeInternals}from"./mergeInternals";function expand(t,n=1/0,o){return n=(n||0)<1?1/0:n,operate((e,r)=>mergeInternals(e,r,t,n,void 0,!0,o))}export{expand};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kLnRzIl0sIm5hbWVzIjpbIm9wZXJhdGUiLCJtZXJnZUludGVybmFscyIsImV4cGFuZCIsInByb2plY3QiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJzY2hlZHVsZXIiLCJzb3VyY2UiLCJzdWJzY3JpYmVyIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiT0FDU0EsT0FBNkIsS0FBZCxzQkFDZkMsY0FBd0MsS0FBbEIsbUJBc0V6QixTQUFVQyxPQUNkQyxFQUNBQyxFQUFhQyxFQUFBQSxFQUNiQyxHQUdBLE9BREFGLEdBQWNBLEdBQWMsR0FBSyxFQUFJQyxFQUFBQSxFQUFXRCxFQUN6Q0osUUFBUSxDQUFDTyxFQUFRQyxJQUN0QlAsZUFFRU0sRUFDQUMsRUFDQUwsRUFDQUMsRUFHQUssS0FBQUEsRUFHQSxDQUFBLEVBQ0FILEMsQ0FDRCxDQUVMLFFBdEJnQkosTUFzQmhCIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BlcmF0b3JGdW5jdGlvbiwgT2JzZXJ2YWJsZUlucHV0LCBPYnNlcnZlZFZhbHVlT2YsIFNjaGVkdWxlckxpa2UgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZDxULCBPIGV4dGVuZHMgT2JzZXJ2YWJsZUlucHV0PHVua25vd24+PihcbiAgcHJvamVjdDogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBPLFxuICBjb25jdXJyZW50PzogbnVtYmVyLFxuICBzY2hlZHVsZXI/OiBTY2hlZHVsZXJMaWtlXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE9ic2VydmVkVmFsdWVPZjxPPj47XG4vKipcbiAqIEBkZXByZWNhdGVkIFRoZSBgc2NoZWR1bGVyYCBwYXJhbWV0ZXIgd2lsbCBiZSByZW1vdmVkIGluIHY4LiBJZiB5b3UgbmVlZCB0byBzY2hlZHVsZSB0aGUgaW5uZXIgc3Vic2NyaXB0aW9uLFxuICogdXNlIGBzdWJzY3JpYmVPbmAgd2l0aGluIHRoZSBwcm9qZWN0aW9uIGZ1bmN0aW9uOiBgZXhwYW5kKCh2YWx1ZSkgPT4gZm4odmFsdWUpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSkpYC5cbiAqIERldGFpbHM6IERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL3NjaGVkdWxlci1hcmd1bWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwYW5kPFQsIE8gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8dW5rbm93bj4+KFxuICBwcm9qZWN0OiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IE8sXG4gIGNvbmN1cnJlbnQ6IG51bWJlciB8IHVuZGVmaW5lZCxcbiAgc2NoZWR1bGVyOiBTY2hlZHVsZXJMaWtlXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE9ic2VydmVkVmFsdWVPZjxPPj47XG4vKiB0c2xpbnQ6ZW5hYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHByb2plY3RzIGVhY2ggc291cmNlIHZhbHVlIHRvIGFuIE9ic2VydmFibGUgd2hpY2ggaXMgbWVyZ2VkIGluXG4gKiB0aGUgb3V0cHV0IE9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPkl0J3Mgc2ltaWxhciB0byB7QGxpbmsgbWVyZ2VNYXB9LCBidXQgYXBwbGllcyB0aGVcbiAqIHByb2plY3Rpb24gZnVuY3Rpb24gdG8gZXZlcnkgc291cmNlIHZhbHVlIGFzIHdlbGwgYXMgZXZlcnkgb3V0cHV0IHZhbHVlLlxuICogSXQncyByZWN1cnNpdmUuPC9zcGFuPlxuICpcbiAqICFbXShleHBhbmQucG5nKVxuICpcbiAqIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIGl0ZW1zIGJhc2VkIG9uIGFwcGx5aW5nIGEgZnVuY3Rpb24gdGhhdCB5b3VcbiAqIHN1cHBseSB0byBlYWNoIGl0ZW0gZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUsIHdoZXJlIHRoYXQgZnVuY3Rpb25cbiAqIHJldHVybnMgYW4gT2JzZXJ2YWJsZSwgYW5kIHRoZW4gbWVyZ2luZyB0aG9zZSByZXN1bHRpbmcgT2JzZXJ2YWJsZXMgYW5kXG4gKiBlbWl0dGluZyB0aGUgcmVzdWx0cyBvZiB0aGlzIG1lcmdlci4gKkV4cGFuZCogd2lsbCByZS1lbWl0IG9uIHRoZSBvdXRwdXRcbiAqIE9ic2VydmFibGUgZXZlcnkgc291cmNlIHZhbHVlLiBUaGVuLCBlYWNoIG91dHB1dCB2YWx1ZSBpcyBnaXZlbiB0byB0aGVcbiAqIGBwcm9qZWN0YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIGlubmVyIE9ic2VydmFibGUgdG8gYmUgbWVyZ2VkIG9uIHRoZVxuICogb3V0cHV0IE9ic2VydmFibGUuIFRob3NlIG91dHB1dCB2YWx1ZXMgcmVzdWx0aW5nIGZyb20gdGhlIHByb2plY3Rpb24gYXJlIGFsc29cbiAqIGdpdmVuIHRvIHRoZSBgcHJvamVjdGAgZnVuY3Rpb24gdG8gcHJvZHVjZSBuZXcgb3V0cHV0IHZhbHVlcy4gVGhpcyBpcyBob3dcbiAqICpleHBhbmQqIGJlaGF2ZXMgcmVjdXJzaXZlbHkuXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIFN0YXJ0IGVtaXR0aW5nIHRoZSBwb3dlcnMgb2YgdHdvIG9uIGV2ZXJ5IGNsaWNrLCBhdCBtb3N0IDEwIG9mIHRoZW1cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZnJvbUV2ZW50LCBtYXAsIGV4cGFuZCwgb2YsIGRlbGF5LCB0YWtlIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3QgY2xpY2tzID0gZnJvbUV2ZW50KGRvY3VtZW50LCAnY2xpY2snKTtcbiAqIGNvbnN0IHBvd2Vyc09mVHdvID0gY2xpY2tzLnBpcGUoXG4gKiAgIG1hcCgoKSA9PiAxKSxcbiAqICAgZXhwYW5kKHggPT4gb2YoMiAqIHgpLnBpcGUoZGVsYXkoMTAwMCkpKSxcbiAqICAgdGFrZSgxMClcbiAqICk7XG4gKiBwb3dlcnNPZlR3by5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBtZXJnZU1hcH1cbiAqIEBzZWUge0BsaW5rIG1lcmdlU2Nhbn1cbiAqXG4gKiBAcGFyYW0gcHJvamVjdCBBIGZ1bmN0aW9uIHRoYXQsIHdoZW4gYXBwbGllZCB0byBhbiBpdGVtIGVtaXR0ZWQgYnkgdGhlIHNvdXJjZVxuICogb3IgdGhlIG91dHB1dCBPYnNlcnZhYmxlLCByZXR1cm5zIGFuIE9ic2VydmFibGUuXG4gKiBAcGFyYW0gY29uY3VycmVudCBNYXhpbXVtIG51bWJlciBvZiBpbnB1dCBPYnNlcnZhYmxlcyBiZWluZyBzdWJzY3JpYmVkIHRvXG4gKiBjb25jdXJyZW50bHkuXG4gKiBAcGFyYW0gc2NoZWR1bGVyIFRoZSB7QGxpbmsgU2NoZWR1bGVyTGlrZX0gdG8gdXNlIGZvciBzdWJzY3JpYmluZyB0b1xuICogZWFjaCBwcm9qZWN0ZWQgaW5uZXIgT2JzZXJ2YWJsZS5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHRoZSBzb3VyY2UgdmFsdWVzXG4gKiBhbmQgYWxzbyByZXN1bHQgb2YgYXBwbHlpbmcgdGhlIHByb2plY3Rpb24gZnVuY3Rpb24gdG8gZWFjaCB2YWx1ZSBlbWl0dGVkIG9uXG4gKiB0aGUgb3V0cHV0IE9ic2VydmFibGUgYW5kIG1lcmdpbmcgdGhlIHJlc3VsdHMgb2YgdGhlIE9ic2VydmFibGVzIG9idGFpbmVkXG4gKiBmcm9tIHRoaXMgdHJhbnNmb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmQ8VCwgTyBleHRlbmRzIE9ic2VydmFibGVJbnB1dDx1bmtub3duPj4oXG4gIHByb2plY3Q6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gTyxcbiAgY29uY3VycmVudCA9IEluZmluaXR5LFxuICBzY2hlZHVsZXI/OiBTY2hlZHVsZXJMaWtlXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE9ic2VydmVkVmFsdWVPZjxPPj4ge1xuICBjb25jdXJyZW50ID0gKGNvbmN1cnJlbnQgfHwgMCkgPCAxID8gSW5maW5pdHkgOiBjb25jdXJyZW50O1xuICByZXR1cm4gb3BlcmF0ZSgoc291cmNlLCBzdWJzY3JpYmVyKSA9PlxuICAgIG1lcmdlSW50ZXJuYWxzKFxuICAgICAgLy8gR2VuZXJhbCBtZXJnZSBwYXJhbXNcbiAgICAgIHNvdXJjZSxcbiAgICAgIHN1YnNjcmliZXIsXG4gICAgICBwcm9qZWN0LFxuICAgICAgY29uY3VycmVudCxcblxuICAgICAgLy8gb25CZWZvcmVOZXh0XG4gICAgICB1bmRlZmluZWQsXG5cbiAgICAgIC8vIEV4cGFuZC1zcGVjaWZpY1xuICAgICAgdHJ1ZSwgLy8gVXNlIGV4cGFuZCBwYXRoXG4gICAgICBzY2hlZHVsZXIgLy8gSW5uZXIgc3Vic2NyaXB0aW9uIHNjaGVkdWxlclxuICAgIClcbiAgKTtcbn1cbiJdfQ==
