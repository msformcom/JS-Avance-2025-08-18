import{innerFrom}from"../observable/innerFrom";import{Subject}from"../Subject";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function retryWhen(n){return operate((r,e)=>{let t,o=!1,b,i=()=>{t=r.subscribe(createOperatorSubscriber(e,void 0,void 0,r=>{b||(b=new Subject,innerFrom(n(b)).subscribe(createOperatorSubscriber(e,()=>t?i():o=!0))),b&&b.next(r)})),o&&(t.unsubscribe(),t=null,o=!1,i())};i()})}export{retryWhen};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuLnRzIl0sIm5hbWVzIjpbImlubmVyRnJvbSIsIlN1YmplY3QiLCJvcGVyYXRlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwicmV0cnlXaGVuIiwibm90aWZpZXIiLCJzb3VyY2UiLCJzdWJzY3JpYmVyIiwibGV0IiwiaW5uZXJTdWIiLCJzeW5jUmVzdWIiLCJlcnJvcnMkIiwic3Vic2NyaWJlRm9yUmV0cnlXaGVuIiwic3Vic2NyaWJlIiwidW5kZWZpbmVkIiwibmV4dCIsImVyciIsInVuc3Vic2NyaWJlIl0sIm1hcHBpbmdzIjoiT0FDU0EsU0FBMEMsS0FBekIsaUNBQ2pCQyxPQUEyQixLQUFaLG9CQUlmQyxPQUE2QixLQUFkLHNCQUNmQyx3QkFBc0QsS0FBdEIsdUJBMkRuQyxTQUFVQyxVQUFhQyxHQUMzQixPQUFPSCxRQUFRLENBQUNJLEVBQVFDLEtBQ3RCQyxJQUFJQyxFQUNBQyxFQUFZLENBQUEsRUFDWkMsRUFFRUMsRUFBd0IsS0FDNUJILEVBQVdILEVBQU9PLFVBQ2hCVix5QkFBeUJJLEVBQVlPLEtBQUFBLEVBQVdBLEtBQUFBLEVBQVcsSUFDcERILElBQ0hBLEVBQVUsSUFBSVYsUUFDZEQsVUFBVUssRUFBU00sQ0FBTyxDQUFDLEVBQUVFLFVBQzNCVix5QkFBeUJJLEVBQVksSUFNbkNFLEVBQVdHLEVBQXFCLEVBQU1GLEVBQVksQ0FBQSxDQUFLLENBQ3hELEdBR0RDLEdBRUZBLEVBQVFJLEtBQUtDLENBQUcsQ0FFcEIsQ0FBQyxDQUFDLEVBR0FOLElBS0ZELEVBQVNRLFlBQVcsRUFDcEJSLEVBQVcsS0FFWEMsRUFBWSxDQUFBLEVBRVpFLEVBQXFCLEVBRXpCLEVBR0FBLEVBQXFCLENBQ3ZCLENBQUMsQ0FDSCxRQTlDZ0JSLFNBOENoQiIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3JldHJ5V2hlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL1N1YnNjcmlwdGlvbic7XG5cbmltcG9ydCB7IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbiwgT2JzZXJ2YWJsZUlucHV0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5cbi8qKlxuICogUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgc291cmNlIE9ic2VydmFibGUgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIGFuIGBlcnJvcmAuIElmIHRoZSBzb3VyY2UgT2JzZXJ2YWJsZVxuICogY2FsbHMgYGVycm9yYCwgdGhpcyBtZXRob2Qgd2lsbCBlbWl0IHRoZSBUaHJvd2FibGUgdGhhdCBjYXVzZWQgdGhlIGVycm9yIHRvIHRoZSBgT2JzZXJ2YWJsZUlucHV0YCByZXR1cm5lZCBmcm9tIGBub3RpZmllcmAuXG4gKiBJZiB0aGF0IE9ic2VydmFibGUgY2FsbHMgYGNvbXBsZXRlYCBvciBgZXJyb3JgIHRoZW4gdGhpcyBtZXRob2Qgd2lsbCBjYWxsIGBjb21wbGV0ZWAgb3IgYGVycm9yYCBvbiB0aGUgY2hpbGRcbiAqIHN1YnNjcmlwdGlvbi4gT3RoZXJ3aXNlIHRoaXMgbWV0aG9kIHdpbGwgcmVzdWJzY3JpYmUgdG8gdGhlIHNvdXJjZSBPYnNlcnZhYmxlLlxuICpcbiAqICFbXShyZXRyeVdoZW4ucG5nKVxuICpcbiAqIFJldHJ5IGFuIG9ic2VydmFibGUgc2VxdWVuY2Ugb24gZXJyb3IgYmFzZWQgb24gY3VzdG9tIGNyaXRlcmlhLlxuICpcbiAqICMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaW50ZXJ2YWwsIG1hcCwgcmV0cnlXaGVuLCB0YXAsIGRlbGF5V2hlbiwgdGltZXIgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjb25zdCBzb3VyY2UgPSBpbnRlcnZhbCgxMDAwKTtcbiAqIGNvbnN0IHJlc3VsdCA9IHNvdXJjZS5waXBlKFxuICogICBtYXAodmFsdWUgPT4ge1xuICogICAgIGlmICh2YWx1ZSA+IDUpIHtcbiAqICAgICAgIC8vIGVycm9yIHdpbGwgYmUgcGlja2VkIHVwIGJ5IHJldHJ5V2hlblxuICogICAgICAgdGhyb3cgdmFsdWU7XG4gKiAgICAgfVxuICogICAgIHJldHVybiB2YWx1ZTtcbiAqICAgfSksXG4gKiAgIHJldHJ5V2hlbihlcnJvcnMgPT5cbiAqICAgICBlcnJvcnMucGlwZShcbiAqICAgICAgIC8vIGxvZyBlcnJvciBtZXNzYWdlXG4gKiAgICAgICB0YXAodmFsdWUgPT4gY29uc29sZS5sb2coYFZhbHVlICR7IHZhbHVlIH0gd2FzIHRvbyBoaWdoIWApKSxcbiAqICAgICAgIC8vIHJlc3RhcnQgaW4gNSBzZWNvbmRzXG4gKiAgICAgICBkZWxheVdoZW4odmFsdWUgPT4gdGltZXIodmFsdWUgKiAxMDAwKSlcbiAqICAgICApXG4gKiAgIClcbiAqICk7XG4gKlxuICogcmVzdWx0LnN1YnNjcmliZSh2YWx1ZSA9PiBjb25zb2xlLmxvZyh2YWx1ZSkpO1xuICpcbiAqIC8vIHJlc3VsdHM6XG4gKiAvLyAwXG4gKiAvLyAxXG4gKiAvLyAyXG4gKiAvLyAzXG4gKiAvLyA0XG4gKiAvLyA1XG4gKiAvLyAnVmFsdWUgNiB3YXMgdG9vIGhpZ2ghJ1xuICogLy8gLSBXYWl0IDUgc2Vjb25kcyB0aGVuIHJlcGVhdFxuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgcmV0cnl9XG4gKlxuICogQHBhcmFtIG5vdGlmaWVyIEZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYW4gT2JzZXJ2YWJsZSBvZiBub3RpZmljYXRpb25zIHdpdGggd2hpY2ggYVxuICogdXNlciBjYW4gYGNvbXBsZXRlYCBvciBgZXJyb3JgLCBhYm9ydGluZyB0aGUgcmV0cnkuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBtaXJyb3JzIHRoZSBzb3VyY2VcbiAqIE9ic2VydmFibGUgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIGFuIGBlcnJvcmAuXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjkgb3IgdjEwLCB1c2Uge0BsaW5rIHJldHJ5fSdzIGBkZWxheWAgb3B0aW9uIGluc3RlYWQuXG4gKiBXaWxsIGJlIHJlbW92ZWQgaW4gdjkgb3IgdjEwLiBVc2Uge0BsaW5rIHJldHJ5fSdzIHtAbGluayBSZXRyeUNvbmZpZyNkZWxheSBkZWxheX0gb3B0aW9uIGluc3RlYWQuXG4gKiBJbnN0ZWFkIG9mIGByZXRyeVdoZW4oKCkgPT4gbm90aWZ5JClgLCB1c2U6IGByZXRyeSh7IGRlbGF5OiAoKSA9PiBub3RpZnkkIH0pYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJldHJ5V2hlbjxUPihub3RpZmllcjogKGVycm9yczogT2JzZXJ2YWJsZTxhbnk+KSA9PiBPYnNlcnZhYmxlSW5wdXQ8YW55Pik6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gIHJldHVybiBvcGVyYXRlKChzb3VyY2UsIHN1YnNjcmliZXIpID0+IHtcbiAgICBsZXQgaW5uZXJTdWI6IFN1YnNjcmlwdGlvbiB8IG51bGw7XG4gICAgbGV0IHN5bmNSZXN1YiA9IGZhbHNlO1xuICAgIGxldCBlcnJvcnMkOiBTdWJqZWN0PGFueT47XG5cbiAgICBjb25zdCBzdWJzY3JpYmVGb3JSZXRyeVdoZW4gPSAoKSA9PiB7XG4gICAgICBpbm5lclN1YiA9IHNvdXJjZS5zdWJzY3JpYmUoXG4gICAgICAgIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgKGVycikgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3JzJCkge1xuICAgICAgICAgICAgZXJyb3JzJCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgICAgICAgICBpbm5lckZyb20obm90aWZpZXIoZXJyb3JzJCkpLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsICgpID0+XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhbiBpbm5lclN1YiwgdGhpcyB3YXMgYW4gYXN5bmNocm9ub3VzIGNhbGwsIGtpY2sgb2ZmIHRoZSByZXRyeS5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIGlmIHdlIGRvbid0IGhhdmUgYW4gaW5uZXJTdWIgeWV0LCB0aGF0J3MgYmVjYXVzZSB0aGUgaW5uZXIgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgLy8gY2FsbCBoYXNuJ3QgZXZlbiByZXR1cm5lZCB5ZXQuIFdlJ3ZlIGFycml2ZWQgaGVyZSBzeW5jaHJvbm91c2x5LlxuICAgICAgICAgICAgICAgIC8vIFNvIHdlIGZsYWcgdGhhdCB3ZSB3YW50IHRvIHJlc3ViLCBzdWNoIHRoYXQgd2UgY2FuIGVuc3VyZSBmaW5hbGl6YXRpb25cbiAgICAgICAgICAgICAgICAvLyBoYXBwZW5zIGJlZm9yZSB3ZSByZXN1YnNjcmliZS5cbiAgICAgICAgICAgICAgICBpbm5lclN1YiA/IHN1YnNjcmliZUZvclJldHJ5V2hlbigpIDogKHN5bmNSZXN1YiA9IHRydWUpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlcnJvcnMkKSB7XG4gICAgICAgICAgICAvLyBXZSBoYXZlIHNldCB1cCB0aGUgbm90aWZpZXIgd2l0aG91dCBlcnJvci5cbiAgICAgICAgICAgIGVycm9ycyQubmV4dChlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGlmIChzeW5jUmVzdWIpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGlubmVyIHN1YnNjcmlwdGlvbiBpcyB0b3JuIGRvd24gYmVmb3JlXG4gICAgICAgIC8vIG1vdmluZyBvbiB0byB0aGUgbmV4dCBzdWJzY3JpcHRpb24gaW4gdGhlIHN5bmNocm9ub3VzIGNhc2UuXG4gICAgICAgIC8vIElmIHdlIGRvbid0IGRvIHRoaXMgaGVyZSwgYWxsIGlubmVyIHN1YnNjcmlwdGlvbnMgd2lsbCBub3QgYmVcbiAgICAgICAgLy8gdG9ybiBkb3duIHVudGlsIHRoZSBlbnRpcmUgb2JzZXJ2YWJsZSBpcyBkb25lLlxuICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgIC8vIFdlIG1heSBuZWVkIHRvIGRvIHRoaXMgbXVsdGlwbGUgdGltZXMsIHNvIHJlc2V0IHRoZSBmbGFnLlxuICAgICAgICBzeW5jUmVzdWIgPSBmYWxzZTtcbiAgICAgICAgLy8gUmVzdWJzY3JpYmVcbiAgICAgICAgc3Vic2NyaWJlRm9yUmV0cnlXaGVuKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFN0YXJ0IHRoZSBzdWJzY3JpcHRpb25cbiAgICBzdWJzY3JpYmVGb3JSZXRyeVdoZW4oKTtcbiAgfSk7XG59XG4iXX0=
