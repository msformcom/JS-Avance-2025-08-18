import{Subject}from"../Subject";import{asyncScheduler}from"../scheduler/async";import{Subscription}from"../Subscription";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{arrRemove}from"../util/arrRemove";import{popScheduler}from"../util/args";import{executeSchedule}from"../util/executeSchedule";function windowTime(s,...e){let p=popScheduler(e)??asyncScheduler,r=e[0]??null,m=e[1]||1/0;return operate((e,t)=>{let u=[],i=!1,c=e=>{var{window:r,subs:o}=e;r.complete(),o.unsubscribe(),arrRemove(u,e),i&&l()},l=()=>{if(u){var r=new Subscription,o=(t.add(r),new Subject);let e={window:o,subs:r,seen:0};u.push(e),t.next(o.asObservable()),executeSchedule(r,p,()=>c(e),s)}},o=(null!==r&&0<=r?executeSchedule(t,p,l,r,!0):i=!0,l(),e=>u.slice().forEach(e)),n=r=>{o(({window:e})=>r(e)),r(t),t.unsubscribe()};return e.subscribe(createOperatorSubscriber(t,r=>{o(e=>{e.window.next(r),m<=++e.seen&&c(e)})},()=>n(e=>e.complete()),r=>n(e=>e.error(r)))),()=>{u=null}})}export{windowTime};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
