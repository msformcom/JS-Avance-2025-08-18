import{ConnectableObservable}from"../observable/ConnectableObservable";import{isFunction}from"../util/isFunction";import{connect}from"./connect";function multicast(n,t){let e=isFunction(n)?n:()=>n;return isFunction(t)?connect(t,{connector:e}):n=>new ConnectableObservable(n,e)}export{multicast};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvbXVsdGljYXN0LnRzIl0sIm5hbWVzIjpbIkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSIsImlzRnVuY3Rpb24iLCJjb25uZWN0IiwibXVsdGljYXN0Iiwic3ViamVjdE9yU3ViamVjdEZhY3RvcnkiLCJzZWxlY3RvciIsInN1YmplY3RGYWN0b3J5IiwiY29ubmVjdG9yIiwic291cmNlIl0sIm1hcHBpbmdzIjoiT0FFU0EscUJBQWtFLEtBQXJDLDZDQUU3QkMsVUFBc0MsS0FBcEIsNEJBQ2xCQyxPQUEwQixLQUFYLFlBNEVsQixTQUFVQyxVQUNkQyxFQUNBQyxHQUVBLElBQU1DLEVBQWlCTCxXQUFXRyxDQUF1QixFQUFJQSxFQUEwQixJQUFNQSxFQUU3RixPQUFJSCxXQUFXSSxDQUFRLEVBSWRILFFBQVFHLEVBQVUsQ0FDdkJFLFVBQVdELEMsQ0FDWixFQUdJLEdBQTJCLElBQUlOLHNCQUEyQlEsRUFBUUYsQ0FBYyxDQUN6RixRQWhCZ0JILFNBZ0JoQiIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL211bHRpY2FzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuLi9TdWJqZWN0JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IENvbm5lY3RhYmxlT2JzZXJ2YWJsZSB9IGZyb20gJy4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IE9wZXJhdG9yRnVuY3Rpb24sIFVuYXJ5RnVuY3Rpb24sIE9ic2VydmVkVmFsdWVPZiwgT2JzZXJ2YWJsZUlucHV0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnLi9jb25uZWN0JztcblxuLyoqXG4gKiBBbiBvcGVyYXRvciB0aGF0IGNyZWF0ZXMgYSB7QGxpbmsgQ29ubmVjdGFibGVPYnNlcnZhYmxlfSwgdGhhdCB3aGVuIGNvbm5lY3RlZCxcbiAqIHdpdGggdGhlIGBjb25uZWN0YCBtZXRob2QsIHdpbGwgdXNlIHRoZSBwcm92aWRlZCBzdWJqZWN0IHRvIG11bHRpY2FzdCB0aGUgdmFsdWVzXG4gKiBmcm9tIHRoZSBzb3VyY2UgdG8gYWxsIGNvbnN1bWVycy5cbiAqXG4gKiBAcGFyYW0gc3ViamVjdCBUaGUgc3ViamVjdCB0byBtdWx0aWNhc3QgdGhyb3VnaC5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSB7QGxpbmsgQ29ubmVjdGFibGVPYnNlcnZhYmxlfVxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY4LiBUbyBjcmVhdGUgYSBjb25uZWN0YWJsZSBvYnNlcnZhYmxlLCB1c2Uge0BsaW5rIGNvbm5lY3RhYmxlfS5cbiAqIElmIHlvdSdyZSB1c2luZyB7QGxpbmsgcmVmQ291bnR9IGFmdGVyIGBtdWx0aWNhc3RgLCB1c2UgdGhlIHtAbGluayBzaGFyZX0gb3BlcmF0b3IgaW5zdGVhZC5cbiAqIGBtdWx0aWNhc3Qoc3ViamVjdCksIHJlZkNvdW50KClgIGlzIGVxdWl2YWxlbnQgdG9cbiAqIGBzaGFyZSh7IGNvbm5lY3RvcjogKCkgPT4gc3ViamVjdCwgcmVzZXRPbkVycm9yOiBmYWxzZSwgcmVzZXRPbkNvbXBsZXRlOiBmYWxzZSwgcmVzZXRPblJlZkNvdW50WmVybzogZmFsc2UgfSlgLlxuICogRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvbXVsdGljYXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aWNhc3Q8VD4oc3ViamVjdDogU3ViamVjdDxUPik6IFVuYXJ5RnVuY3Rpb248T2JzZXJ2YWJsZTxUPiwgQ29ubmVjdGFibGVPYnNlcnZhYmxlPFQ+PjtcblxuLyoqXG4gKiBCZWNhdXNlIHRoaXMgaXMgZGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUge0BsaW5rIGNvbm5lY3R9IG9wZXJhdG9yLCBhbmQgd2FzIG90aGVyd2lzZSBwb29ybHkgZG9jdW1lbnRlZCxcbiAqIHJhdGhlciB0aGFuIGR1cGxpY2F0ZSB0aGUgZWZmb3J0IG9mIGRvY3VtZW50aW5nIHRoZSBzYW1lIGJlaGF2aW9yLCBwbGVhc2Ugc2VlIGRvY3VtZW50YXRpb24gZm9yIHRoZVxuICoge0BsaW5rIGNvbm5lY3R9IG9wZXJhdG9yLlxuICpcbiAqIEBwYXJhbSBzdWJqZWN0IFRoZSBzdWJqZWN0IHVzZWQgdG8gbXVsdGljYXN0LlxuICogQHBhcmFtIHNlbGVjdG9yIEEgc2V0dXAgZnVuY3Rpb24gdG8gc2V0dXAgdGhlIG11bHRpY2FzdFxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgbWlycm9ycyB0aGUgb2JzZXJ2YWJsZSByZXR1cm5lZCBieSB0aGUgc2VsZWN0b3IuXG4gKiBAZGVwcmVjYXRlZCBXaWxsIGJlIHJlbW92ZWQgaW4gdjguIFVzZSB0aGUge0BsaW5rIGNvbm5lY3R9IG9wZXJhdG9yIGluc3RlYWQuXG4gKiBgbXVsdGljYXN0KHN1YmplY3QsIHNlbGVjdG9yKWAgaXMgZXF1aXZhbGVudCB0b1xuICogYGNvbm5lY3Qoc2VsZWN0b3IsIHsgY29ubmVjdG9yOiAoKSA9PiBzdWJqZWN0IH0pYC5cbiAqIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL211bHRpY2FzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGljYXN0PFQsIE8gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8YW55Pj4oXG4gIHN1YmplY3Q6IFN1YmplY3Q8VD4sXG4gIHNlbGVjdG9yOiAoc2hhcmVkOiBPYnNlcnZhYmxlPFQ+KSA9PiBPXG4pOiBPcGVyYXRvckZ1bmN0aW9uPFQsIE9ic2VydmVkVmFsdWVPZjxPPj47XG5cbi8qKlxuICogQW4gb3BlcmF0b3IgdGhhdCBjcmVhdGVzIGEge0BsaW5rIENvbm5lY3RhYmxlT2JzZXJ2YWJsZX0sIHRoYXQgd2hlbiBjb25uZWN0ZWQsXG4gKiB3aXRoIHRoZSBgY29ubmVjdGAgbWV0aG9kLCB3aWxsIHVzZSB0aGUgcHJvdmlkZWQgc3ViamVjdCB0byBtdWx0aWNhc3QgdGhlIHZhbHVlc1xuICogZnJvbSB0aGUgc291cmNlIHRvIGFsbCBjb25zdW1lcnMuXG4gKlxuICogQHBhcmFtIHN1YmplY3RGYWN0b3J5IEEgZmFjdG9yeSB0aGF0IHdpbGwgYmUgY2FsbGVkIHRvIGNyZWF0ZSB0aGUgc3ViamVjdC4gUGFzc2luZyBhIGZ1bmN0aW9uIGhlcmVcbiAqIHdpbGwgY2F1c2UgdGhlIHVuZGVybHlpbmcgc3ViamVjdCB0byBiZSBcInJlc2V0XCIgb24gZXJyb3IsIGNvbXBsZXRpb24sIG9yIHJlZkNvdW50ZWQgdW5zdWJzY3JpcHRpb24gb2ZcbiAqIHRoZSBzb3VyY2UuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEge0BsaW5rIENvbm5lY3RhYmxlT2JzZXJ2YWJsZX1cbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gVG8gY3JlYXRlIGEgY29ubmVjdGFibGUgb2JzZXJ2YWJsZSwgdXNlIHtAbGluayBjb25uZWN0YWJsZX0uXG4gKiBJZiB5b3UncmUgdXNpbmcge0BsaW5rIHJlZkNvdW50fSBhZnRlciBgbXVsdGljYXN0YCwgdXNlIHRoZSB7QGxpbmsgc2hhcmV9IG9wZXJhdG9yIGluc3RlYWQuXG4gKiBgbXVsdGljYXN0KCgpID0+IG5ldyBCZWhhdmlvclN1YmplY3QoJ3Rlc3QnKSksIHJlZkNvdW50KClgIGlzIGVxdWl2YWxlbnQgdG9cbiAqIGBzaGFyZSh7IGNvbm5lY3RvcjogKCkgPT4gbmV3IEJlaGF2aW9yU3ViamVjdCgndGVzdCcpIH0pYC5cbiAqIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL211bHRpY2FzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGljYXN0PFQ+KHN1YmplY3RGYWN0b3J5OiAoKSA9PiBTdWJqZWN0PFQ+KTogVW5hcnlGdW5jdGlvbjxPYnNlcnZhYmxlPFQ+LCBDb25uZWN0YWJsZU9ic2VydmFibGU8VD4+O1xuXG4vKipcbiAqIEJlY2F1c2UgdGhpcyBpcyBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSB7QGxpbmsgY29ubmVjdH0gb3BlcmF0b3IsIGFuZCB3YXMgb3RoZXJ3aXNlIHBvb3JseSBkb2N1bWVudGVkLFxuICogcmF0aGVyIHRoYW4gZHVwbGljYXRlIHRoZSBlZmZvcnQgb2YgZG9jdW1lbnRpbmcgdGhlIHNhbWUgYmVoYXZpb3IsIHBsZWFzZSBzZWUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlXG4gKiB7QGxpbmsgY29ubmVjdH0gb3BlcmF0b3IuXG4gKlxuICogQHBhcmFtIHN1YmplY3RGYWN0b3J5IEEgZmFjdG9yeSB0aGF0IGNyZWF0ZXMgdGhlIHN1YmplY3QgdXNlZCB0byBtdWx0aWNhc3QuXG4gKiBAcGFyYW0gc2VsZWN0b3IgQSBmdW5jdGlvbiB0byBzZXR1cCB0aGUgbXVsdGljYXN0IGFuZCBzZWxlY3QgdGhlIG91dHB1dC5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IG1pcnJvcnMgdGhlIG9ic2VydmFibGUgcmV0dXJuZWQgYnkgdGhlIHNlbGVjdG9yLlxuICogQGRlcHJlY2F0ZWQgV2lsbCBiZSByZW1vdmVkIGluIHY4LiBVc2UgdGhlIHtAbGluayBjb25uZWN0fSBvcGVyYXRvciBpbnN0ZWFkLlxuICogYG11bHRpY2FzdChzdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpYCBpcyBlcXVpdmFsZW50IHRvXG4gKiBgY29ubmVjdChzZWxlY3RvciwgeyBjb25uZWN0b3I6IHN1YmplY3RGYWN0b3J5IH0pYC5cbiAqIERldGFpbHM6IGh0dHBzOi8vcnhqcy5kZXYvZGVwcmVjYXRpb25zL211bHRpY2FzdGluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gbXVsdGljYXN0PFQsIE8gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8YW55Pj4oXG4gIHN1YmplY3RGYWN0b3J5OiAoKSA9PiBTdWJqZWN0PFQ+LFxuICBzZWxlY3RvcjogKHNoYXJlZDogT2JzZXJ2YWJsZTxUPikgPT4gT1xuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBPYnNlcnZlZFZhbHVlT2Y8Tz4+O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gVXNlIHRoZSB7QGxpbmsgY29ubmVjdGFibGV9IG9ic2VydmFibGUsIHRoZSB7QGxpbmsgY29ubmVjdH0gb3BlcmF0b3Igb3IgdGhlXG4gKiB7QGxpbmsgc2hhcmV9IG9wZXJhdG9yIGluc3RlYWQuIFNlZSB0aGUgb3ZlcmxvYWRzIGJlbG93IGZvciBlcXVpdmFsZW50IHJlcGxhY2VtZW50IGV4YW1wbGVzIG9mIHRoaXMgb3BlcmF0b3Inc1xuICogYmVoYXZpb3JzLlxuICogRGV0YWlsczogaHR0cHM6Ly9yeGpzLmRldi9kZXByZWNhdGlvbnMvbXVsdGljYXN0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aWNhc3Q8VCwgUj4oXG4gIHN1YmplY3RPclN1YmplY3RGYWN0b3J5OiBTdWJqZWN0PFQ+IHwgKCgpID0+IFN1YmplY3Q8VD4pLFxuICBzZWxlY3Rvcj86IChzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IE9ic2VydmFibGU8Uj5cbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgUj4ge1xuICBjb25zdCBzdWJqZWN0RmFjdG9yeSA9IGlzRnVuY3Rpb24oc3ViamVjdE9yU3ViamVjdEZhY3RvcnkpID8gc3ViamVjdE9yU3ViamVjdEZhY3RvcnkgOiAoKSA9PiBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeTtcblxuICBpZiAoaXNGdW5jdGlvbihzZWxlY3RvcikpIHtcbiAgICAvLyBJZiBhIHNlbGVjdG9yIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIHdlJ3JlIGEgXCJub3JtYWxcIiBvcGVyYXRvciB0aGF0IGlzbid0XG4gICAgLy8gZ29pbmcgdG8gcmV0dXJuIGEgQ29ubmVjdGFibGVPYnNlcnZhYmxlLiBXZSBjYW4gdXNlIGBjb25uZWN0YCB0byBkbyB3aGF0IHdlXG4gICAgLy8gbmVlZCB0byBkby5cbiAgICByZXR1cm4gY29ubmVjdChzZWxlY3Rvciwge1xuICAgICAgY29ubmVjdG9yOiBzdWJqZWN0RmFjdG9yeSxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiAoc291cmNlOiBPYnNlcnZhYmxlPFQ+KSA9PiBuZXcgQ29ubmVjdGFibGVPYnNlcnZhYmxlPGFueT4oc291cmNlLCBzdWJqZWN0RmFjdG9yeSk7XG59XG4iXX0=
