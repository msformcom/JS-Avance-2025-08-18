import{innerFrom}from"../observable/innerFrom";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function switchMap(p,s){return operate((r,i)=>{let b=null,c=0,e=!1,n=()=>e&&!b&&i.complete();r.subscribe(createOperatorSubscriber(i,e=>{b?.unsubscribe();let t=0,o=c++;innerFrom(p(e,o)).subscribe(b=createOperatorSubscriber(i,r=>i.next(s?s(e,r,o,t++):r),()=>{b=null,n()}))},()=>{e=!0,n()}))})}export{switchMap};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
