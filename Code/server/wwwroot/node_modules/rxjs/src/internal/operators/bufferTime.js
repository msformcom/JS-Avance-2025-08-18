import{Subscription}from"../Subscription";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{arrRemove}from"../util/arrRemove";import{asyncScheduler}from"../scheduler/async";import{popScheduler}from"../util/args";import{executeSchedule}from"../util/executeSchedule";function bufferTime(s,...e){let f=popScheduler(e)??asyncScheduler,u=e[0]??null,b=e[1]||1/0;return operate((e,t)=>{let o=[],i=!1,c=e=>{var{buffer:r,subs:u}=e;u.unsubscribe(),arrRemove(o,e),t.next(r),i&&l()},l=()=>{if(o){var r=new Subscription,u=(t.add(r),[]);let e={buffer:u,subs:r};o.push(e),executeSchedule(r,f,()=>c(e),s)}},r=(null!==u&&0<=u?executeSchedule(t,f,l,u,!0):i=!0,l(),createOperatorSubscriber(t,e=>{var r;for(r of o.slice()){var u=r.buffer;u.push(e),b<=u.length&&c(r)}},()=>{for(;o?.length;)t.next(o.shift().buffer);r?.unsubscribe(),t.complete(),t.unsubscribe()},void 0,()=>o=null));e.subscribe(r)})}export{bufferTime};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
