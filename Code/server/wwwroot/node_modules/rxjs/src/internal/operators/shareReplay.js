import{ReplaySubject}from"../ReplaySubject";import{share}from"./share";function shareReplay(e,r,t){let o,n=!1;return e&&"object"==typeof e?{bufferSize:o=1/0,windowTime:r=1/0,refCount:n=!1,scheduler:t}=e:o=e??1/0,share({connector:()=>new ReplaySubject(o,r,t),resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:n})}export{shareReplay};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
