import{identity}from"../util/identity";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function distinctUntilChanged(o,a=identity){return o=o??defaultCompare,operate((t,e)=>{let i,n=!0;t.subscribe(createOperatorSubscriber(e,t=>{var r=a(t);!n&&o(i,r)||(n=!1,i=r,e.next(t))}))})}function defaultCompare(t,r){return t===r}export{distinctUntilChanged};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
