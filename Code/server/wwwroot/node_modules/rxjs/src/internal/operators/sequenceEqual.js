import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{innerFrom}from"../observable/innerFrom";function sequenceEqual(c,n=(e,r)=>e===r){return operate((e,r)=>{var t=createState(),o=createState();let a=e=>{r.next(e),r.complete()};var u=(o,u)=>{let t=createOperatorSubscriber(r,e=>{var{buffer:r,complete:t}=u;0===r.length?t?a(!1):o.buffer.push(e):n(e,r.shift())||a(!1)},()=>{o.complete=!0;var{complete:e,buffer:r}=u;e&&a(0===r.length),t?.unsubscribe()});return t};e.subscribe(u(t,o)),innerFrom(c).subscribe(u(o,t))})}function createState(){return{buffer:[],complete:!1}}export{sequenceEqual};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
