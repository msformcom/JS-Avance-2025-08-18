import{EMPTY}from"../observable/empty";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";import{innerFrom}from"../observable/innerFrom";import{timer}from"../observable/timer";function repeat(e){let p=1/0,u;return null!=e&&("object"==typeof e?{count:p=1/0,delay:u}=e:p=e),p<=0?()=>EMPTY:operate((r,t)=>{let o=0,b,i=()=>{if(b?.unsubscribe(),(b=null)!=u){var r="number"==typeof u?timer(u):innerFrom(u(o));let e=createOperatorSubscriber(t,()=>{e.unsubscribe(),m()});r.subscribe(e)}else m()},m=()=>{let e=!1;b=r.subscribe(createOperatorSubscriber(t,void 0,()=>{++o<p?b?i():e=!0:t.complete()})),e&&i()};m()})}export{repeat};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
