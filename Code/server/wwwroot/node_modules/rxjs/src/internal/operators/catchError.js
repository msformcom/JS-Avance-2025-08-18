import{innerFrom}from"../observable/innerFrom";import{createOperatorSubscriber}from"./OperatorSubscriber";import{operate}from"../util/lift";function catchError(c){return operate((e,o)=>{let i=null,t=!1,b;i=e.subscribe(createOperatorSubscriber(o,void 0,void 0,r=>{b=innerFrom(c(r,catchError(c)(e))),i?(i.unsubscribe(),i=null,b.subscribe(o)):t=!0})),t&&(i.unsubscribe(),i=null,b.subscribe(o))})}export{catchError};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvY2F0Y2hFcnJvci50cyJdLCJuYW1lcyI6WyJpbm5lckZyb20iLCJjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIiLCJvcGVyYXRlIiwiY2F0Y2hFcnJvciIsInNlbGVjdG9yIiwic291cmNlIiwic3Vic2NyaWJlciIsImxldCIsImlubmVyU3ViIiwic3luY1Vuc3ViIiwiaGFuZGxlZFJlc3VsdCIsInN1YnNjcmliZSIsInVuZGVmaW5lZCIsImVyciIsInVuc3Vic2NyaWJlIl0sIm1hcHBpbmdzIjoiT0FJU0EsU0FBMEMsS0FBekIsaUNBQ2pCQyx3QkFBc0QsS0FBdEIsOEJBQ2hDQyxPQUE2QixLQUFkLGVBa0dsQixTQUFVQyxXQUNkQyxHQUVBLE9BQU9GLFFBQVEsQ0FBQ0csRUFBUUMsS0FDdEJDLElBQUlDLEVBQWdDLEtBQ2hDQyxFQUFZLENBQUEsRUFDWkMsRUFFSkYsRUFBV0gsRUFBT00sVUFDaEJWLHlCQUF5QkssRUFBWU0sS0FBQUEsRUFBV0EsS0FBQUEsRUFBVyxJQUN6REYsRUFBZ0JWLFVBQVVJLEVBQVNTLEVBQUtWLFdBQVdDLENBQVEsRUFBRUMsQ0FBTSxDQUFDLENBQUMsRUFDakVHLEdBQ0ZBLEVBQVNNLFlBQVcsRUFDcEJOLEVBQVcsS0FDWEUsRUFBY0MsVUFBVUwsQ0FBVSxHQUlsQ0csRUFBWSxDQUFBLENBRWhCLENBQUMsQ0FBQyxFQUdBQSxJQU1GRCxFQUFTTSxZQUFXLEVBQ3BCTixFQUFXLEtBQ1hFLEVBQWVDLFVBQVVMLENBQVUsRUFFdkMsQ0FBQyxDQUNILFFBbENnQkgsVUFrQ2hCIiwiZmlsZSI6Im5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvY2F0Y2hFcnJvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZUlucHV0LCBPcGVyYXRvckZ1bmN0aW9uLCBPYnNlcnZlZFZhbHVlT2YgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXRjaEVycm9yPFQsIE8gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8YW55Pj4oXG4gIHNlbGVjdG9yOiAoZXJyOiBhbnksIGNhdWdodDogT2JzZXJ2YWJsZTxUPikgPT4gT1xuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUIHwgT2JzZXJ2ZWRWYWx1ZU9mPE8+PjtcblxuLyoqXG4gKiBDYXRjaGVzIGVycm9ycyBvbiB0aGUgb2JzZXJ2YWJsZSB0byBiZSBoYW5kbGVkIGJ5IHJldHVybmluZyBhIG5ldyBvYnNlcnZhYmxlIG9yIHRocm93aW5nIGFuIGVycm9yLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5cbiAqIEl0IG9ubHkgbGlzdGVucyB0byB0aGUgZXJyb3IgY2hhbm5lbCBhbmQgaWdub3JlcyBub3RpZmljYXRpb25zLlxuICogSGFuZGxlcyBlcnJvcnMgZnJvbSB0aGUgc291cmNlIG9ic2VydmFibGUsIGFuZCBtYXBzIHRoZW0gdG8gYSBuZXcgb2JzZXJ2YWJsZS5cbiAqIFRoZSBlcnJvciBtYXkgYWxzbyBiZSByZXRocm93biwgb3IgYSBuZXcgZXJyb3IgY2FuIGJlIHRocm93biB0byBlbWl0IGFuIGVycm9yIGZyb20gdGhlIHJlc3VsdC5cbiAqIDwvc3Bhbj5cbiAqXG4gKiAhW10oY2F0Y2gucG5nKVxuICpcbiAqIFRoaXMgb3BlcmF0b3IgaGFuZGxlcyBlcnJvcnMsIGJ1dCBmb3J3YXJkcyBhbG9uZyBhbGwgb3RoZXIgZXZlbnRzIHRvIHRoZSByZXN1bHRpbmcgb2JzZXJ2YWJsZS5cbiAqIElmIHRoZSBzb3VyY2Ugb2JzZXJ2YWJsZSB0ZXJtaW5hdGVzIHdpdGggYW4gZXJyb3IsIGl0IHdpbGwgbWFwIHRoYXQgZXJyb3IgdG8gYSBuZXcgb2JzZXJ2YWJsZSxcbiAqIHN1YnNjcmliZSB0byBpdCwgYW5kIGZvcndhcmQgYWxsIG9mIGl0cyBldmVudHMgdG8gdGhlIHJlc3VsdGluZyBvYnNlcnZhYmxlLlxuICpcbiAqICMjIEV4YW1wbGVzXG4gKlxuICogQ29udGludWUgd2l0aCBhIGRpZmZlcmVudCBPYnNlcnZhYmxlIHdoZW4gdGhlcmUncyBhbiBlcnJvclxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBvZiwgbWFwLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcyc7XG4gKlxuICogb2YoMSwgMiwgMywgNCwgNSlcbiAqICAgLnBpcGUoXG4gKiAgICAgbWFwKG4gPT4ge1xuICogICAgICAgaWYgKG4gPT09IDQpIHtcbiAqICAgICAgICAgdGhyb3cgJ2ZvdXIhJztcbiAqICAgICAgIH1cbiAqICAgICAgIHJldHVybiBuO1xuICogICAgIH0pLFxuICogICAgIGNhdGNoRXJyb3IoZXJyID0+IG9mKCdJJywgJ0lJJywgJ0lJSScsICdJVicsICdWJykpXG4gKiAgIClcbiAqICAgLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcbiAqICAgLy8gMSwgMiwgMywgSSwgSUksIElJSSwgSVYsIFZcbiAqIGBgYFxuICpcbiAqIFJldHJ5IHRoZSBjYXVnaHQgc291cmNlIE9ic2VydmFibGUgYWdhaW4gaW4gY2FzZSBvZiBlcnJvciwgc2ltaWxhciB0byBgcmV0cnkoKWAgb3BlcmF0b3JcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgb2YsIG1hcCwgY2F0Y2hFcnJvciwgdGFrZSB9IGZyb20gJ3J4anMnO1xuICpcbiAqIG9mKDEsIDIsIDMsIDQsIDUpXG4gKiAgIC5waXBlKFxuICogICAgIG1hcChuID0+IHtcbiAqICAgICAgIGlmIChuID09PSA0KSB7XG4gKiAgICAgICAgIHRocm93ICdmb3VyISc7XG4gKiAgICAgICB9XG4gKiAgICAgICByZXR1cm4gbjtcbiAqICAgICB9KSxcbiAqICAgICBjYXRjaEVycm9yKChlcnIsIGNhdWdodCkgPT4gY2F1Z2h0KSxcbiAqICAgICB0YWtlKDMwKVxuICogICApXG4gKiAgIC5zdWJzY3JpYmUoeCA9PiBjb25zb2xlLmxvZyh4KSk7XG4gKiAgIC8vIDEsIDIsIDMsIDEsIDIsIDMsIC4uLlxuICogYGBgXG4gKlxuICogVGhyb3cgYSBuZXcgZXJyb3Igd2hlbiB0aGUgc291cmNlIE9ic2VydmFibGUgdGhyb3dzIGFuIGVycm9yXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCB7IG9mLCBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBvZigxLCAyLCAzLCA0LCA1KVxuICogICAucGlwZShcbiAqICAgICBtYXAobiA9PiB7XG4gKiAgICAgICBpZiAobiA9PT0gNCkge1xuICogICAgICAgICB0aHJvdyAnZm91ciEnO1xuICogICAgICAgfVxuICogICAgICAgcmV0dXJuIG47XG4gKiAgICAgfSksXG4gKiAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICogICAgICAgdGhyb3cgJ2Vycm9yIGluIHNvdXJjZS4gRGV0YWlsczogJyArIGVycjtcbiAqICAgICB9KVxuICogICApXG4gKiAgIC5zdWJzY3JpYmUoe1xuICogICAgIG5leHQ6IHggPT4gY29uc29sZS5sb2coeCksXG4gKiAgICAgZXJyb3I6IGVyciA9PiBjb25zb2xlLmxvZyhlcnIpXG4gKiAgIH0pO1xuICogICAvLyAxLCAyLCAzLCBlcnJvciBpbiBzb3VyY2UuIERldGFpbHM6IGZvdXIhXG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBvbkVycm9yUmVzdW1lTmV4dH1cbiAqIEBzZWUge0BsaW5rIHJlcGVhdH1cbiAqIEBzZWUge0BsaW5rIHJlcGVhdFdoZW59XG4gKiBAc2VlIHtAbGluayByZXRyeSB9XG4gKiBAc2VlIHtAbGluayByZXRyeVdoZW59XG4gKlxuICogQHBhcmFtIHNlbGVjdG9yIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhcyBhcmd1bWVudHMgYGVycmAsIHdoaWNoIGlzIHRoZSBlcnJvciwgYW5kIGBjYXVnaHRgLCB3aGljaFxuICogaXMgdGhlIHNvdXJjZSBvYnNlcnZhYmxlLCBpbiBjYXNlIHlvdSdkIGxpa2UgdG8gXCJyZXRyeVwiIHRoYXQgb2JzZXJ2YWJsZSBieSByZXR1cm5pbmcgaXQgYWdhaW4uXG4gKiBXaGF0ZXZlciBvYnNlcnZhYmxlIGlzIHJldHVybmVkIGJ5IHRoZSBgc2VsZWN0b3JgIHdpbGwgYmUgdXNlZCB0byBjb250aW51ZSB0aGUgb2JzZXJ2YWJsZSBjaGFpbi5cbiAqIEByZXR1cm4gQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG9yaWdpbmF0ZXMgZnJvbSBlaXRoZXJcbiAqIHRoZSBzb3VyY2Ugb3IgdGhlIE9ic2VydmFibGUgcmV0dXJuZWQgYnkgdGhlIGBzZWxlY3RvcmAgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXRjaEVycm9yPFQsIE8gZXh0ZW5kcyBPYnNlcnZhYmxlSW5wdXQ8YW55Pj4oXG4gIHNlbGVjdG9yOiAoZXJyOiBhbnksIGNhdWdodDogT2JzZXJ2YWJsZTxUPikgPT4gT1xuKTogT3BlcmF0b3JGdW5jdGlvbjxULCBUIHwgT2JzZXJ2ZWRWYWx1ZU9mPE8+PiB7XG4gIHJldHVybiBvcGVyYXRlKChzb3VyY2UsIHN1YnNjcmliZXIpID0+IHtcbiAgICBsZXQgaW5uZXJTdWI6IFN1YnNjcmlwdGlvbiB8IG51bGwgPSBudWxsO1xuICAgIGxldCBzeW5jVW5zdWIgPSBmYWxzZTtcbiAgICBsZXQgaGFuZGxlZFJlc3VsdDogT2JzZXJ2YWJsZTxPYnNlcnZlZFZhbHVlT2Y8Tz4+O1xuXG4gICAgaW5uZXJTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKFxuICAgICAgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAoZXJyKSA9PiB7XG4gICAgICAgIGhhbmRsZWRSZXN1bHQgPSBpbm5lckZyb20oc2VsZWN0b3IoZXJyLCBjYXRjaEVycm9yKHNlbGVjdG9yKShzb3VyY2UpKSk7XG4gICAgICAgIGlmIChpbm5lclN1Yikge1xuICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgIGhhbmRsZWRSZXN1bHQuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFdlIGRvbid0IGhhdmUgYW4gaW5uZXJTdWIgeWV0LCB0aGF0IG1lYW5zIHRoZSBlcnJvciB3YXMgc3luY2hyb25vdXNcbiAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBzdWJzY3JpYmUgY2FsbCBoYXNuJ3QgcmV0dXJuZWQgeWV0LlxuICAgICAgICAgIHN5bmNVbnN1YiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGlmIChzeW5jVW5zdWIpIHtcbiAgICAgIC8vIFdlIGhhdmUgYSBzeW5jaHJvbm91cyBlcnJvciwgd2UgbmVlZCB0byBtYWtlIHN1cmUgdG9cbiAgICAgIC8vIGZpbmFsaXplIHJpZ2h0IGF3YXkuIFRoaXMgZW5zdXJlcyB0aGF0IGNhbGxiYWNrcyBpbiB0aGUgYGZpbmFsaXplYCBvcGVyYXRvciBhcmUgY2FsbGVkXG4gICAgICAvLyBhdCB0aGUgcmlnaHQgdGltZSwgYW5kIHRoYXQgZmluYWxpemF0aW9uIG9jY3VycyBhdCB0aGUgZXhwZWN0ZWRcbiAgICAgIC8vIHRpbWUgYmV0d2VlbiB0aGUgc291cmNlIGVycm9yIGFuZCB0aGUgc3Vic2NyaXB0aW9uIHRvIHRoZVxuICAgICAgLy8gbmV4dCBvYnNlcnZhYmxlLlxuICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgIGhhbmRsZWRSZXN1bHQhLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9XG4gIH0pO1xufVxuIl19
