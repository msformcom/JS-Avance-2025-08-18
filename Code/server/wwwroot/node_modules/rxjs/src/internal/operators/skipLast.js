import{identity}from"../util/identity";import{operate}from"../util/lift";import{createOperatorSubscriber}from"./OperatorSubscriber";function skipLast(p){return p<=0?identity:operate((r,i)=>{let o=new Array(p),a=0;return r.subscribe(createOperatorSubscriber(i,r=>{var t,e=a++;e<p?o[e]=r:(e=e%p,t=o[e],o[e]=r,i.next(t))})),()=>{o=null}})}export{skipLast};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcExhc3QudHMiXSwibmFtZXMiOlsiaWRlbnRpdHkiLCJvcGVyYXRlIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwic2tpcExhc3QiLCJza2lwQ291bnQiLCJzb3VyY2UiLCJzdWJzY3JpYmVyIiwibGV0IiwicmluZyIsIkFycmF5Iiwic2VlbiIsInN1YnNjcmliZSIsIm9sZFZhbHVlIiwidmFsdWVJbmRleCIsInZhbHVlIiwiaW5kZXgiLCJuZXh0Il0sIm1hcHBpbmdzIjoiT0FDU0EsUUFBa0MsS0FBbEIsMEJBQ2hCQyxPQUE2QixLQUFkLHNCQUNmQyx3QkFBc0QsS0FBdEIsdUJBNENuQyxTQUFVQyxTQUFZQyxHQUMxQixPQUFPQSxHQUFhLEVBRWhCSixTQUNBQyxRQUFRLENBQUNJLEVBQVFDLEtBSWZDLElBQUlDLEVBQVksSUFBSUMsTUFBTUwsQ0FBUyxFQUcvQk0sRUFBTyxFQStCWCxPQTlCQUwsRUFBT00sVUFDTFQseUJBQXlCSSxFQUFZLElBS25DLElBYVFNLEVBYkZDLEVBQWFILENBQUksR0FDbkJHLEVBQWFULEVBSWZJLEVBQUtLLEdBQWNDLEdBS2JDLEVBQVFGLEVBQWFULEVBR3JCUSxFQUFXSixFQUFLTyxHQUN0QlAsRUFBS08sR0FBU0QsRUFLZFIsRUFBV1UsS0FBS0osQ0FBUSxFQUU1QixDQUFDLENBQUMsRUFHRyxLQUVMSixFQUFPLElBQ1QsQ0FDRixDQUFDLENBQ1AsUUEvQ2dCTCxRQStDaEIiLCJmaWxlIjoibm9kZV9tb2R1bGVzL3J4anMvc3JjL2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vdXRpbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcblxuLyoqXG4gKiBTa2lwIGEgc3BlY2lmaWVkIG51bWJlciBvZiB2YWx1ZXMgYmVmb3JlIHRoZSBjb21wbGV0aW9uIG9mIGFuIG9ic2VydmFibGUuXG4gKlxuICogIVtdKHNraXBMYXN0LnBuZylcbiAqXG4gKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCB3aWxsIGVtaXQgdmFsdWVzIGFzIHNvb24gYXMgaXQgY2FuLCBnaXZlbiBhIG51bWJlciBvZlxuICogc2tpcHBlZCB2YWx1ZXMuIEZvciBleGFtcGxlLCBpZiB5b3UgYHNraXBMYXN0KDMpYCBvbiBhIHNvdXJjZSwgd2hlbiB0aGUgc291cmNlXG4gKiBlbWl0cyBpdHMgZm91cnRoIHZhbHVlLCB0aGUgZmlyc3QgdmFsdWUgdGhlIHNvdXJjZSBlbWl0dGVkIHdpbGwgZmluYWxseSBiZSBlbWl0dGVkXG4gKiBmcm9tIHRoZSByZXR1cm5lZCBvYnNlcnZhYmxlLCBhcyBpdCBpcyBubyBsb25nZXIgcGFydCBvZiB3aGF0IG5lZWRzIHRvIGJlIHNraXBwZWQuXG4gKlxuICogQWxsIHZhbHVlcyBlbWl0dGVkIGJ5IHRoZSByZXN1bHQgb2YgYHNraXBMYXN0KE4pYCB3aWxsIGJlIGRlbGF5ZWQgYnkgYE5gIGVtaXNzaW9ucyxcbiAqIGFzIGVhY2ggdmFsdWUgaXMgaGVsZCBpbiBhIGJ1ZmZlciB1bnRpbCBlbm91Z2ggdmFsdWVzIGhhdmUgYmVlbiBlbWl0dGVkIHRoYXQgdGhhdFxuICogdGhlIGJ1ZmZlcmVkIHZhbHVlIG1heSBmaW5hbGx5IGJlIHNlbnQgdG8gdGhlIGNvbnN1bWVyLlxuICpcbiAqIEFmdGVyIHN1YnNjcmliaW5nLCB1bnN1YnNjcmliaW5nIHdpbGwgbm90IHJlc3VsdCBpbiB0aGUgZW1pc3Npb24gb2YgdGhlIGJ1ZmZlcmVkXG4gKiBza2lwcGVkIHZhbHVlcy5cbiAqXG4gKiAjIyBFeGFtcGxlXG4gKlxuICogU2tpcCB0aGUgbGFzdCAyIHZhbHVlcyBvZiBhbiBvYnNlcnZhYmxlIHdpdGggbWFueSB2YWx1ZXNcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgb2YsIHNraXBMYXN0IH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3QgbnVtYmVycyA9IG9mKDEsIDIsIDMsIDQsIDUpO1xuICogY29uc3Qgc2tpcExhc3RUd28gPSBudW1iZXJzLnBpcGUoc2tpcExhc3QoMikpO1xuICogc2tpcExhc3RUd28uc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xuICpcbiAqIC8vIFJlc3VsdHMgaW46XG4gKiAvLyAxIDIgM1xuICogLy8gKDQgYW5kIDUgYXJlIHNraXBwZWQpXG4gKiBgYGBcbiAqXG4gKiBAc2VlIHtAbGluayBza2lwfVxuICogQHNlZSB7QGxpbmsgc2tpcFVudGlsfVxuICogQHNlZSB7QGxpbmsgc2tpcFdoaWxlfVxuICogQHNlZSB7QGxpbmsgdGFrZX1cbiAqXG4gKiBAcGFyYW0gc2tpcENvdW50IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGZyb20gdGhlIGVuZCBvZiB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKiBAcmV0dXJuIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBza2lwcyB0aGUgbGFzdCBgY291bnRgXG4gKiB2YWx1ZXMgZW1pdHRlZCBieSB0aGUgc291cmNlIE9ic2VydmFibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBza2lwTGFzdDxUPihza2lwQ291bnQ6IG51bWJlcik6IE1vbm9UeXBlT3BlcmF0b3JGdW5jdGlvbjxUPiB7XG4gIHJldHVybiBza2lwQ291bnQgPD0gMFxuICAgID8gLy8gRm9yIHNraXBDb3VudHMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHplcm8sIHdlIGFyZSBqdXN0IG1pcnJvcmluZyB0aGUgc291cmNlLlxuICAgICAgaWRlbnRpdHlcbiAgICA6IG9wZXJhdGUoKHNvdXJjZSwgc3Vic2NyaWJlcikgPT4ge1xuICAgICAgICAvLyBBIHJpbmcgYnVmZmVyIHRvIGhvbGQgdGhlIHZhbHVlcyB3aGlsZSB3ZSB3YWl0IHRvIHNlZVxuICAgICAgICAvLyBpZiB3ZSBjYW4gZW1pdCBpdCBvciBpdCdzIHBhcnQgb2YgdGhlIFwic2tpcHBlZFwiIGxhc3QgdmFsdWVzLlxuICAgICAgICAvLyBOb3RlIHRoYXQgaXQgaXMgdGhlIF9zYW1lIHNpemVfIGFzIHRoZSBza2lwIGNvdW50LlxuICAgICAgICBsZXQgcmluZzogVFtdID0gbmV3IEFycmF5KHNraXBDb3VudCk7XG4gICAgICAgIC8vIFRoZSBudW1iZXIgb2YgdmFsdWVzIHNlZW4gc28gZmFyLiBUaGlzIGlzIHVzZWQgdG8gZ2V0XG4gICAgICAgIC8vIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCB2YWx1ZSB3aGVuIGl0IGFycml2ZXMuXG4gICAgICAgIGxldCBzZWVuID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShcbiAgICAgICAgICBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAvLyBHZXQgdGhlIGluZGV4IG9mIHRoZSB2YWx1ZSB3ZSBoYXZlIHJpZ2h0IG5vd1xuICAgICAgICAgICAgLy8gcmVsYXRpdmUgdG8gYWxsIG90aGVyIHZhbHVlcyB3ZSd2ZSBzZWVuLCB0aGVuXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgYHNlZW5gLiBUaGlzIGVuc3VyZXMgd2UndmUgbW92ZWQgdG9cbiAgICAgICAgICAgIC8vIHRoZSBuZXh0IHNsb3QgaW4gb3VyIHJpbmcgYnVmZmVyLlxuICAgICAgICAgICAgY29uc3QgdmFsdWVJbmRleCA9IHNlZW4rKztcbiAgICAgICAgICAgIGlmICh2YWx1ZUluZGV4IDwgc2tpcENvdW50KSB7XG4gICAgICAgICAgICAgIC8vIElmIHdlIGhhdmVuJ3Qgc2VlbiBlbm91Z2ggdmFsdWVzIHRvIGZpbGwgb3VyIGJ1ZmZlciB5ZXQsXG4gICAgICAgICAgICAgIC8vIFRoZW4gd2UgYXJlbid0IHRvIGEgbnVtYmVyIG9mIHNlZW4gdmFsdWVzIHdoZXJlIHdlIGNhblxuICAgICAgICAgICAgICAvLyBlbWl0IGFueXRoaW5nLCBzbyBsZXQncyBqdXN0IHN0YXJ0IGJ5IGZpbGxpbmcgdGhlIHJpbmcgYnVmZmVyLlxuICAgICAgICAgICAgICByaW5nW3ZhbHVlSW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBXZSBhcmUgdHJhdmVyc2luZyBvdmVyIHRoZSByaW5nIGFycmF5IGluIHN1Y2hcbiAgICAgICAgICAgICAgLy8gYSB3YXkgdGhhdCB3aGVuIHdlIGdldCB0byB0aGUgZW5kLCB3ZSBsb29wIGJhY2tcbiAgICAgICAgICAgICAgLy8gYW5kIGdvIHRvIHRoZSBzdGFydC5cbiAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB2YWx1ZUluZGV4ICUgc2tpcENvdW50O1xuICAgICAgICAgICAgICAvLyBQdWxsIHRoZSBvbGRlc3QgdmFsdWUgb3V0IHNvIHdlIGNhbiBlbWl0IGl0LFxuICAgICAgICAgICAgICAvLyBhbmQgc3R1ZmYgdGhlIG5ldyB2YWx1ZSBpbiBpdCdzIHBsYWNlLlxuICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHJpbmdbaW5kZXhdO1xuICAgICAgICAgICAgICByaW5nW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAvLyBFbWl0IHRoZSBvbGQgdmFsdWUuIEl0IGlzIGltcG9ydGFudCB0aGF0IHRoaXMgaGFwcGVuc1xuICAgICAgICAgICAgICAvLyBhZnRlciB3ZSBzd2FwIHRoZSB2YWx1ZSBpbiB0aGUgYnVmZmVyLCBpZiBpdCBoYXBwZW5zXG4gICAgICAgICAgICAgIC8vIGJlZm9yZSB3ZSBzd2FwIHRoZSB2YWx1ZSBpbiB0aGUgYnVmZmVyLCB0aGVuIGEgc3luY2hyb25vdXNcbiAgICAgICAgICAgICAgLy8gc291cmNlIGNhbiBnZXQgdGhlIGJ1ZmZlciBvdXQgb2Ygd2hhY2suXG4gICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChvbGRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIC8vIFJlbGVhc2Ugb3VyIHZhbHVlcyBpbiBtZW1vcnlcbiAgICAgICAgICByaW5nID0gbnVsbCE7XG4gICAgICAgIH07XG4gICAgICB9KTtcbn1cbiJdfQ==
