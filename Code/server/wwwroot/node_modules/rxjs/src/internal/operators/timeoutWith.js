import{async}from"../scheduler/async";import{isValidDate}from"../util/isDate";import{timeout}from"./timeout";function timeoutWith(t,e,o){let i,r,u;if(o=o??async,isValidDate(t)?i=t:"number"==typeof t&&(r=t),!e)throw new TypeError("No observable provided to switch to");if(u=()=>e,null==i&&null==r)throw new TypeError("No timeout provided.");return timeout({first:i,each:r,scheduler:o,with:u})}export{timeoutWith};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZW91dFdpdGgudHMiXSwibmFtZXMiOlsiYXN5bmMiLCJpc1ZhbGlkRGF0ZSIsInRpbWVvdXQiLCJ0aW1lb3V0V2l0aCIsImR1ZSIsIndpdGhPYnNlcnZhYmxlIiwic2NoZWR1bGVyIiwibGV0IiwiZmlyc3QiLCJlYWNoIiwiX3dpdGgiLCJUeXBlRXJyb3IiLCJ3aXRoIl0sIm1hcHBpbmdzIjoiT0FBU0EsS0FBaUMsS0FBcEIsNEJBQ2JDLFdBQW1DLEtBQWhCLHdCQUVuQkMsT0FBMEIsS0FBWCxZQStFbEIsU0FBVUMsWUFDZEMsRUFDQUMsRUFDQUMsR0FFQUMsSUFBSUMsRUFDQUMsRUFDQUMsRUFTSixHQVJBSixFQUFZQSxHQUFhTixNQUVyQkMsWUFBWUcsQ0FBRyxFQUNqQkksRUFBUUosRUFDZ0IsVUFBZixPQUFPQSxJQUNoQkssRUFBT0wsR0FHTEMsQ0FBQUEsRUFHRixNQUFNLElBQUlNLFVBQVUscUNBQXFDLEVBRzNELEdBTEVELEVBQVEsSUFBTUwsRUFLSCxNQUFURyxHQUF5QixNQUFSQyxFQUVuQixNQUFNLElBQUlFLFVBQVUsc0JBQXNCLEVBRzVDLE9BQU9ULFFBQStCLENBQ3BDTSxNQUFBQSxFQUNBQyxLQUFBQSxFQUNBSCxVQUFBQSxFQUNBTSxLQUFNRixDLENBQ1AsQ0FDSCxRQWpDZ0JQLFdBaUNoQiIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRXaXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmMgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgaXNWYWxpZERhdGUgfSBmcm9tICcuLi91dGlsL2lzRGF0ZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlSW5wdXQsIE9wZXJhdG9yRnVuY3Rpb24sIFNjaGVkdWxlckxpa2UgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyB0aW1lb3V0IH0gZnJvbSAnLi90aW1lb3V0JztcblxuLyoqIEBkZXByZWNhdGVkIFJlcGxhY2VkIHdpdGgge0BsaW5rIHRpbWVvdXR9LiBJbnN0ZWFkIG9mIGB0aW1lb3V0V2l0aChzb21lRGF0ZSwgYSQsIHNjaGVkdWxlcilgLCB1c2UgdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKiBgdGltZW91dCh7IGZpcnN0OiBzb21lRGF0ZSwgd2l0aDogKCkgPT4gYSQsIHNjaGVkdWxlciB9KWAuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0V2l0aDxULCBSPihkdWVCeTogRGF0ZSwgc3dpdGNoVG86IE9ic2VydmFibGVJbnB1dDxSPiwgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IFI+O1xuLyoqIEBkZXByZWNhdGVkIFJlcGxhY2VkIHdpdGgge0BsaW5rIHRpbWVvdXR9LiBJbnN0ZWFkIG9mIGB0aW1lb3V0V2l0aCgxMDAsIGEkLCBzY2hlZHVsZXIpYCwgdXNlIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdFxuICogIGB0aW1lb3V0KHsgZWFjaDogMTAwLCB3aXRoOiAoKSA9PiBhJCwgc2NoZWR1bGVyIH0pYC4gV2lsbCBiZSByZW1vdmVkIGluIHY4LiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXRXaXRoPFQsIFI+KHdhaXRGb3I6IG51bWJlciwgc3dpdGNoVG86IE9ic2VydmFibGVJbnB1dDxSPiwgc2NoZWR1bGVyPzogU2NoZWR1bGVyTGlrZSk6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IFI+O1xuXG4vKipcbiAqIFdoZW4gdGhlIHBhc3NlZCB0aW1lc3BhbiBlbGFwc2VzIGJlZm9yZSB0aGUgc291cmNlIGVtaXRzIGFueSBnaXZlbiB2YWx1ZSwgaXQgd2lsbCB1bnN1YnNjcmliZSBmcm9tIHRoZSBzb3VyY2UsXG4gKiBhbmQgc3dpdGNoIHRoZSBzdWJzY3JpcHRpb24gdG8gYW5vdGhlciBvYnNlcnZhYmxlLlxuICpcbiAqIDxzcGFuIGNsYXNzPVwiaW5mb3JtYWxcIj5Vc2VkIHRvIHN3aXRjaCB0byBhIGRpZmZlcmVudCBvYnNlcnZhYmxlIGlmIHlvdXIgc291cmNlIGlzIGJlaW5nIHNsb3cuPC9zcGFuPlxuICpcbiAqIFVzZWZ1bCBpbiBjYXNlcyB3aGVyZTpcbiAqXG4gKiAtIFlvdSB3YW50IHRvIHN3aXRjaCB0byBhIGRpZmZlcmVudCBzb3VyY2UgdGhhdCBtYXkgYmUgZmFzdGVyLlxuICogLSBZb3Ugd2FudCB0byBub3RpZnkgYSB1c2VyIHRoYXQgdGhlIGRhdGEgc3RyZWFtIGlzIHNsb3cuXG4gKiAtIFlvdSB3YW50IHRvIGVtaXQgYSBjdXN0b20gZXJyb3IgcmF0aGVyIHRoYW4gdGhlIHtAbGluayBUaW1lb3V0RXJyb3J9IGVtaXR0ZWRcbiAqICAgYnkgdGhlIGRlZmF1bHQgdXNhZ2Ugb2Yge0BsaW5rIHRpbWVvdXR9LlxuICpcbiAqIElmIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgcGFzc2VkIGFzIERhdGUgYW5kIHRoZSB0aW1lIG9mIHRoZSBEYXRlIGFycml2ZXMgYmVmb3JlIHRoZSBmaXJzdCB2YWx1ZSBhcnJpdmVzIGZyb20gdGhlIHNvdXJjZSxcbiAqIGl0IHdpbGwgdW5zdWJzY3JpYmUgZnJvbSB0aGUgc291cmNlIGFuZCBzd2l0Y2ggdGhlIHN1YnNjcmlwdGlvbiB0byBhbm90aGVyIG9ic2VydmFibGUuXG4gKlxuICogPHNwYW4gY2xhc3M9XCJpbmZvcm1hbFwiPlVzZSBEYXRlIG9iamVjdCB0byBzd2l0Y2ggdG8gYSBkaWZmZXJlbnQgb2JzZXJ2YWJsZSBpZiB0aGUgZmlyc3QgdmFsdWUgZG9lc24ndCBhcnJpdmUgYnkgYSBzcGVjaWZpYyB0aW1lLjwvc3Bhbj5cbiAqXG4gKiBDYW4gYmUgdXNlZCB0byBzZXQgYSB0aW1lb3V0IG9ubHkgZm9yIHRoZSBmaXJzdCB2YWx1ZSwgaG93ZXZlciBpdCdzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUge0BsaW5rIHRpbWVvdXR9IG9wZXJhdG9yIHdpdGhcbiAqIHRoZSBgZmlyc3RgIGNvbmZpZ3VyYXRpb24gdG8gZ2V0IHRoZSBzYW1lIGVmZmVjdC5cbiAqXG4gKiAjIyBFeGFtcGxlc1xuICpcbiAqIEZhbGxiYWNrIHRvIGEgZmFzdGVyIG9ic2VydmFibGVcbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaW50ZXJ2YWwsIHRpbWVvdXRXaXRoIH0gZnJvbSAncnhqcyc7XG4gKlxuICogY29uc3Qgc2xvdyQgPSBpbnRlcnZhbCgxMDAwKTtcbiAqIGNvbnN0IGZhc3RlciQgPSBpbnRlcnZhbCg1MDApO1xuICpcbiAqIHNsb3ckXG4gKiAgIC5waXBlKHRpbWVvdXRXaXRoKDkwMCwgZmFzdGVyJCkpXG4gKiAgIC5zdWJzY3JpYmUoY29uc29sZS5sb2cpO1xuICogYGBgXG4gKlxuICogRW1pdCB5b3VyIG93biBjdXN0b20gdGltZW91dCBlcnJvclxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpbnRlcnZhbCwgdGltZW91dFdpdGgsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJztcbiAqXG4gKiBjbGFzcyBDdXN0b21UaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gKiAgIGNvbnN0cnVjdG9yKCkge1xuICogICAgIHN1cGVyKCdJdCB3YXMgdG9vIHNsb3cnKTtcbiAqICAgICB0aGlzLm5hbWUgPSAnQ3VzdG9tVGltZW91dEVycm9yJztcbiAqICAgfVxuICogfVxuICpcbiAqIGNvbnN0IHNsb3ckID0gaW50ZXJ2YWwoMTAwMCk7XG4gKlxuICogc2xvdyRcbiAqICAgLnBpcGUodGltZW91dFdpdGgoOTAwLCB0aHJvd0Vycm9yKCgpID0+IG5ldyBDdXN0b21UaW1lb3V0RXJyb3IoKSkpKVxuICogICAuc3Vic2NyaWJlKHtcbiAqICAgICBlcnJvcjogZXJyID0+IGNvbnNvbGUuZXJyb3IoZXJyLm1lc3NhZ2UpXG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogQHNlZSB7QGxpbmsgdGltZW91dH1cbiAqXG4gKiBAcGFyYW0gZHVlIFdoZW4gcGFzc2VkIGEgbnVtYmVyLCB1c2VkIGFzIHRoZSB0aW1lIChpbiBtaWxsaXNlY29uZHMpIGFsbG93ZWQgYmV0d2VlbiBlYWNoIHZhbHVlIGZyb20gdGhlIHNvdXJjZSBiZWZvcmUgdGltZW91dFxuICogaXMgdHJpZ2dlcmVkLiBXaGVuIHBhc3NlZCBhIERhdGUsIHVzZWQgYXMgdGhlIGV4YWN0IHRpbWUgYXQgd2hpY2ggdGhlIHRpbWVvdXQgd2lsbCBiZSB0cmlnZ2VyZWQgaWYgdGhlIGZpcnN0IHZhbHVlIGRvZXMgbm90IGFycml2ZS5cbiAqIEBwYXJhbSB3aXRoT2JzZXJ2YWJsZSBUaGUgb2JzZXJ2YWJsZSB0byBzd2l0Y2ggdG8gd2hlbiB0aW1lb3V0IG9jY3Vycy5cbiAqIEBwYXJhbSBzY2hlZHVsZXIgVGhlIHNjaGVkdWxlciB0byB1c2Ugd2l0aCB0aW1lLXJlbGF0ZWQgb3BlcmF0aW9ucyB3aXRoaW4gdGhpcyBvcGVyYXRvci4gRGVmYXVsdHMgdG8ge0BsaW5rIGFzeW5jU2NoZWR1bGVyfVxuICogQHJldHVybiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbWlycm9ycyBiZWhhdmlvdXIgb2YgdGhlXG4gKiBzb3VyY2UgT2JzZXJ2YWJsZSwgdW5sZXNzIHRpbWVvdXQgaGFwcGVucyB3aGVuIGl0IHN0YXJ0cyBlbWl0dGluZyB2YWx1ZXNcbiAqIGZyb20gdGhlIGBPYnNlcnZhYmxlSW5wdXRgIHBhc3NlZCBhcyBhIHNlY29uZCBwYXJhbWV0ZXIuXG4gKiBAZGVwcmVjYXRlZCBSZXBsYWNlZCB3aXRoIHtAbGluayB0aW1lb3V0fS4gSW5zdGVhZCBvZiBgdGltZW91dFdpdGgoMTAwLCBhJCwgc2NoZWR1bGVyKWAsIHVzZSB7QGxpbmsgdGltZW91dH0gd2l0aCB0aGUgY29uZmlndXJhdGlvblxuICogb2JqZWN0OiBgdGltZW91dCh7IGVhY2g6IDEwMCwgd2l0aDogKCkgPT4gYSQsIHNjaGVkdWxlciB9KWAuIEluc3RlYWQgb2YgYHRpbWVvdXRXaXRoKHNvbWVEYXRlLCBhJCwgc2NoZWR1bGVyKWAsIHVzZSB7QGxpbmsgdGltZW91dH1cbiAqIHdpdGggdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0OiBgdGltZW91dCh7IGZpcnN0OiBzb21lRGF0ZSwgd2l0aDogKCkgPT4gYSQsIHNjaGVkdWxlciB9KWAuIFdpbGwgYmUgcmVtb3ZlZCBpbiB2OC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXRXaXRoPFQsIFI+KFxuICBkdWU6IG51bWJlciB8IERhdGUsXG4gIHdpdGhPYnNlcnZhYmxlOiBPYnNlcnZhYmxlSW5wdXQ8Uj4sXG4gIHNjaGVkdWxlcj86IFNjaGVkdWxlckxpa2Vcbik6IE9wZXJhdG9yRnVuY3Rpb248VCwgVCB8IFI+IHtcbiAgbGV0IGZpcnN0OiBudW1iZXIgfCBEYXRlIHwgdW5kZWZpbmVkO1xuICBsZXQgZWFjaDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBsZXQgX3dpdGg6ICgpID0+IE9ic2VydmFibGVJbnB1dDxSPjtcbiAgc2NoZWR1bGVyID0gc2NoZWR1bGVyID8/IGFzeW5jO1xuXG4gIGlmIChpc1ZhbGlkRGF0ZShkdWUpKSB7XG4gICAgZmlyc3QgPSBkdWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGR1ZSA9PT0gJ251bWJlcicpIHtcbiAgICBlYWNoID0gZHVlO1xuICB9XG5cbiAgaWYgKHdpdGhPYnNlcnZhYmxlKSB7XG4gICAgX3dpdGggPSAoKSA9PiB3aXRoT2JzZXJ2YWJsZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBvYnNlcnZhYmxlIHByb3ZpZGVkIHRvIHN3aXRjaCB0bycpO1xuICB9XG5cbiAgaWYgKGZpcnN0ID09IG51bGwgJiYgZWFjaCA9PSBudWxsKSB7XG4gICAgLy8gRW5zdXJlIHRpbWVvdXQgd2FzIHByb3ZpZGVkIGF0IHJ1bnRpbWUuXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gdGltZW91dCBwcm92aWRlZC4nKTtcbiAgfVxuXG4gIHJldHVybiB0aW1lb3V0PFQsIE9ic2VydmFibGVJbnB1dDxSPj4oe1xuICAgIGZpcnN0LFxuICAgIGVhY2gsXG4gICAgc2NoZWR1bGVyLFxuICAgIHdpdGg6IF93aXRoLFxuICB9KTtcbn1cbiJdfQ==
