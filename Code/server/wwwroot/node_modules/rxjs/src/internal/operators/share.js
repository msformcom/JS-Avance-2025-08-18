import{innerFrom}from"../observable/innerFrom";import{Subject}from"../Subject";import{SafeSubscriber}from"../Subscriber";import{operate}from"../util/lift";function share(e={}){let{connector:a=()=>new Subject,resetOnError:f=!0,resetOnComplete:p=!0,resetOnRefCountZero:S=!0}=e;return e=>{let n,o,s,i=0,b=!1,u=!1,c=()=>{o?.unsubscribe(),o=void 0},l=()=>{c(),n=s=void 0,b=u=!1},m=()=>{var e=n;l(),e?.unsubscribe()};return operate((e,r)=>{i++,u||b||c();let t=s=s??a();r.add(()=>{0!==--i||u||b||(o=handleReset(m,S))}),t.subscribe(r),!n&&0<i&&(n=new SafeSubscriber({next:e=>t.next(e),error:e=>{u=!0,c(),o=handleReset(l,f,e),t.error(e)},complete:()=>{b=!0,c(),o=handleReset(l,p),t.complete()}}),innerFrom(e).subscribe(n))})(e)}}function handleReset(r,t,...n){if(!0===t)r();else if(!1!==t){let e=new SafeSubscriber({next:()=>{e.unsubscribe(),r()}});return innerFrom(t(...n)).subscribe(e)}}export{share};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
