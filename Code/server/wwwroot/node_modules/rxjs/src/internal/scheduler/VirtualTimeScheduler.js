import{AsyncAction}from"./AsyncAction";import{Subscription}from"../Subscription";import{AsyncScheduler}from"./AsyncScheduler";class VirtualTimeScheduler extends AsyncScheduler{constructor(e=VirtualAction,t=1/0){super(e,()=>this.frame),this.maxFrames=t,this.frame=0,this.index=-1}flush(){var{actions:e,maxFrames:t}=this;let i,r;for(;(r=e[0])&&r.delay<=t&&(e.shift(),this.frame=r.delay,!(i=r.execute(r.state,r.delay))););if(i){for(;r=e.shift();)r.unsubscribe();throw i}}}VirtualTimeScheduler.frameTimeFactor=10;class VirtualAction extends AsyncAction{constructor(e,t,i=e.index+=1){super(e,t),this.scheduler=e,this.work=t,this.index=i,this.active=!0,this.index=e.index=i}schedule(e,t=0){if(Number.isFinite(t)){if(!this.id)return super.schedule(e,t);this.active=!1;var i=new VirtualAction(this.scheduler,this.work);return this.add(i),i.schedule(e,t)}return Subscription.EMPTY}requestAsyncId(e,t,i=0){this.delay=e.frame+i;i=e.actions;return i.push(this),i.sort(VirtualAction.sortActions),1}recycleAsyncId(e,t,i=0){}_execute(e,t){if(!0===this.active)return super._execute(e,t)}static sortActions(e,t){return e.delay===t.delay?e.index===t.index?0:e.index>t.index?1:-1:e.delay>t.delay?1:-1}}export{VirtualTimeScheduler,VirtualAction};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
