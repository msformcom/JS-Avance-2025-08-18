import{Action}from"./Action";import{intervalProvider}from"./intervalProvider";import{arrRemove}from"../util/arrRemove";class AsyncAction extends Action{constructor(e,i){super(e,i),this.scheduler=e,this.work=i,this.pending=!1}schedule(e,i=0){var t;return this.closed||(this.state=e,e=this.id,t=this.scheduler,null!=e&&(this.id=this.recycleAsyncId(t,e,i)),this.pending=!0,this.delay=i,this.id=this.id??this.requestAsyncId(t,this.id,i)),this}requestAsyncId(e,i,t=0){return intervalProvider.setInterval(e.flush.bind(e,this),t)}recycleAsyncId(e,i,t=0){if(null!=t&&this.delay===t&&!1===this.pending)return i;null!=i&&intervalProvider.clearInterval(i)}execute(e,i){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;e=this._execute(e,i);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(e,i){let t=!1,s;try{this.work(e)}catch(e){t=!0,s=e||new Error("Scheduled action threw falsy error")}if(t)return this.unsubscribe(),s}unsubscribe(){var e,i,t;this.closed||({id:e,scheduler:i}=this,t=i.actions,this.work=this.state=this.scheduler=null,this.pending=!1,arrRemove(t,this),null!=e&&(this.id=this.recycleAsyncId(i,e,null)),this.delay=null,super.unsubscribe())}}export{AsyncAction};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
