import{map}from"../operators/map";import{Observable}from"../Observable";import{AjaxResponse}from"./AjaxResponse";import{AjaxTimeoutError,AjaxError}from"./errors";function ajaxGet(e,r){return ajax({method:"GET",url:e,headers:r})}function ajaxPost(e,r,t){return ajax({method:"POST",url:e,body:r,headers:t})}function ajaxDelete(e,r){return ajax({method:"DELETE",url:e,headers:r})}function ajaxPut(e,r,t){return ajax({method:"PUT",url:e,body:r,headers:t})}function ajaxPatch(e,r,t){return ajax({method:"PATCH",url:e,body:r,headers:t})}let mapResponse=map(e=>e.response);function ajaxGetJSON(e,r){return mapResponse(ajax({method:"GET",url:e,headers:r}))}let ajax=(()=>{var e=e=>fromAjax("string"==typeof e?{url:e}:e);return e.get=ajaxGet,e.post=ajaxPost,e.delete=ajaxDelete,e.put=ajaxPut,e.patch=ajaxPatch,e.getJSON=ajaxGetJSON,e})(),UPLOAD="upload",DOWNLOAD="download",LOADSTART="loadstart",PROGRESS="progress",LOAD="load";function fromAjax(m){return new Observable(s=>{var e={async:!0,crossDomain:!1,withCredentials:!1,method:"GET",timeout:0,responseType:"json",...m},{queryParams:r,body:t,headers:a}=e;let o=e.url;if(!o)throw new TypeError("url is required");if(r){let t;if(o.includes("?")){var n=o.split("?");if(2<n.length)throw new TypeError("invalid url");t=new URLSearchParams(n[1]),new URLSearchParams(r).forEach((e,r)=>t.set(r,e)),o=n[0]+"?"+t}else t=new URLSearchParams(r),o=o+"?"+t}var i={};if(a)for(var u in a)a.hasOwnProperty(u)&&(i[u.toLowerCase()]=a[u]);var n=e.crossDomain,{withCredentials:r,xsrfCookieName:d,xsrfHeaderName:f}=(n||"x-requested-with"in i||(i["x-requested-with"]="XMLHttpRequest"),e),n=((r||!n)&&d&&f&&(r=document?.cookie.match(new RegExp(`(^|;\\s*)(${d})=([^;]*)`))?.pop()??"")&&(i[f]=r),extractContentTypeAndMaybeSerializeBody(t,i));let p={...e,url:o,headers:i,body:n},c;c=m.createXHR?m.createXHR():new XMLHttpRequest;{let{progressSubscriber:t,includeDownloadProgress:e=!1,includeUploadProgress:r=!1}=m;d=(e,r)=>{c.addEventListener(e,()=>{var e=r();t?.error?.(e),s.error(e)})};d("timeout",()=>new AjaxTimeoutError(c,p)),d("abort",()=>new AjaxError("aborted",c,p));let a=(e,r)=>new AjaxResponse(r,c,p,e+"_"+r.type),o=(e,r,t)=>{e.addEventListener(r,e=>{s.next(a(t,e))})},n=(r&&[LOADSTART,PROGRESS,LOAD].forEach(e=>o(c.upload,e,UPLOAD)),t&&[LOADSTART,PROGRESS].forEach(e=>c.upload.addEventListener(e,e=>t?.next?.(e))),e&&[LOADSTART,PROGRESS].forEach(e=>o(c,e,DOWNLOAD)),e=>{s.error(new AjaxError("ajax error"+(e?" "+e:""),c,p))});c.addEventListener("error",e=>{t?.error?.(e),n()}),c.addEventListener(LOAD,r=>{var e=c.status;if(e<400){t?.complete?.();let e;try{e=a(DOWNLOAD,r)}catch(e){return void s.error(e)}s.next(e),s.complete()}else t?.error?.(r),n(e)})}var l,{user:f,method:r,async:t}=p;for(l in f?c.open(r,o,t,f,p.password):c.open(r,o,t),t&&(c.timeout=p.timeout,c.responseType=p.responseType),"withCredentials"in c&&(c.withCredentials=p.withCredentials),i)i.hasOwnProperty(l)&&c.setRequestHeader(l,i[l]);return n?c.send(n):c.send(),()=>{c&&4!==c.readyState&&c.abort()}})}function extractContentTypeAndMaybeSerializeBody(e,r){if(!e||"string"==typeof e||isFormData(e)||isURLSearchParams(e)||isArrayBuffer(e)||isFile(e)||isBlob(e)||isReadableStream(e))return e;if(isArrayBufferView(e))return e.buffer;if("object"==typeof e)return r["content-type"]=r["content-type"]??"application/json;charset=utf-8",JSON.stringify(e);throw new TypeError("Unknown body type")}let _toString=Object.prototype.toString;function toStringCheck(e,r){return _toString.call(e)===`[object ${r}]`}function isArrayBuffer(e){return toStringCheck(e,"ArrayBuffer")}function isFile(e){return toStringCheck(e,"File")}function isBlob(e){return toStringCheck(e,"Blob")}function isArrayBufferView(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView(e)}function isFormData(e){return"undefined"!=typeof FormData&&e instanceof FormData}function isURLSearchParams(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function isReadableStream(e){return"undefined"!=typeof ReadableStream&&e instanceof ReadableStream}export{ajax,fromAjax};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
