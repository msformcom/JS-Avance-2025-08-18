import{getXHRResponse}from"./getXHRResponse";import{createErrorClass}from"../util/createErrorClass";let AjaxError=createErrorClass(r=>function(r,e,t){this.message=r,this.name="AjaxError",this.xhr=e,this.request=t,this.status=e.status,this.responseType=e.responseType;let s;try{s=getXHRResponse(e)}catch(r){s=e.responseText}this.response=s}),AjaxTimeoutError=(()=>{function r(r,e){return AjaxError.call(this,"ajax timeout",r,e),this.name="AjaxTimeoutError",this}return r.prototype=Object.create(AjaxError.prototype),r})();export{AjaxError,AjaxTimeoutError};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9yeGpzL3NyYy9pbnRlcm5hbC9hamF4L2Vycm9ycy50cyJdLCJuYW1lcyI6WyJnZXRYSFJSZXNwb25zZSIsImNyZWF0ZUVycm9yQ2xhc3MiLCJBamF4RXJyb3IiLCJtZXNzYWdlIiwieGhyIiwicmVxdWVzdCIsInRoaXMiLCJuYW1lIiwic3RhdHVzIiwicmVzcG9uc2VUeXBlIiwibGV0IiwicmVzcG9uc2UiLCJlcnIiLCJyZXNwb25zZVRleHQiLCJBamF4VGltZW91dEVycm9yIiwiQWpheFRpbWVvdXRFcnJvckltcGwiLCJjYWxsIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIl0sIm1hcHBpbmdzIjoiT0FDU0EsY0FBd0MsS0FBbEIsMEJBQ3RCQyxnQkFBa0QsS0FBMUIsMkJBbUQxQixJQUFNQyxVQUEyQkQsaUJBQ3RDLEdBQ0UsU0FBa0NFLEVBQWlCQyxFQUFxQkMsR0FDdEVDLEtBQUtILFFBQVVBLEVBQ2ZHLEtBQUtDLEtBQU8sWUFDWkQsS0FBS0YsSUFBTUEsRUFDWEUsS0FBS0QsUUFBVUEsRUFDZkMsS0FBS0UsT0FBU0osRUFBSUksT0FDbEJGLEtBQUtHLGFBQWVMLEVBQUlLLGFBQ3hCQyxJQUFJQyxFQUNKLElBR0VBLEVBQVdYLGVBQWVJLENBQUcsQ0FHL0IsQ0FGRSxNQUFPUSxHQUNQRCxFQUFXUCxFQUFJUyxZQUNqQixDQUNBUCxLQUFLSyxTQUFXQSxDQUNsQixDQUFDLEVBc0JRRyxrQkFBeUMsS0FDcEQsU0FBU0MsRUFBZ0NYLEVBQXFCQyxHQUc1RCxPQUZBSCxVQUFVYyxLQUFLVixLQUFNLGVBQWdCRixFQUFLQyxDQUFPLEVBQ2pEQyxLQUFLQyxLQUFPLG1CQUNMRCxJQUNULENBRUEsT0FEQVMsRUFBcUJFLFVBQVlDLE9BQU9DLE9BQU9qQixVQUFVZSxTQUFTLEVBQzNERixDQUNSLEdBQUMsU0FoRFdiLFVBd0NBWSxnQkFRRiIsImZpbGUiOiJub2RlX21vZHVsZXMvcnhqcy9zcmMvaW50ZXJuYWwvYWpheC9lcnJvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBamF4UmVxdWVzdCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0WEhSUmVzcG9uc2UgfSBmcm9tICcuL2dldFhIUlJlc3BvbnNlJztcbmltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuLi91dGlsL2NyZWF0ZUVycm9yQ2xhc3MnO1xuXG4vKipcbiAqIEEgbm9ybWFsaXplZCBBSkFYIGVycm9yLlxuICpcbiAqIEBzZWUge0BsaW5rIGFqYXh9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWpheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAvKipcbiAgICogVGhlIFhIUiBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVycm9yLlxuICAgKi9cbiAgeGhyOiBYTUxIdHRwUmVxdWVzdDtcblxuICAvKipcbiAgICogVGhlIEFqYXhSZXF1ZXN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXG4gICAqL1xuICByZXF1ZXN0OiBBamF4UmVxdWVzdDtcblxuICAvKipcbiAgICogVGhlIEhUVFAgc3RhdHVzIGNvZGUsIGlmIHRoZSByZXF1ZXN0IGhhcyBjb21wbGV0ZWQuIElmIG5vdCxcbiAgICogaXQgaXMgc2V0IHRvIGAwYC5cbiAgICovXG4gIHN0YXR1czogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgcmVzcG9uc2VUeXBlIChlLmcuICdqc29uJywgJ2FycmF5YnVmZmVyJywgb3IgJ3htbCcpLlxuICAgKi9cbiAgcmVzcG9uc2VUeXBlOiBYTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZTtcblxuICAvKipcbiAgICogVGhlIHJlc3BvbnNlIGRhdGEuXG4gICAqL1xuICByZXNwb25zZTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFqYXhFcnJvckN0b3Ige1xuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsLiBEbyBub3QgY29uc3RydWN0IGVycm9yIGluc3RhbmNlcy5cbiAgICogQ2Fubm90IGJlIHRhZ2dlZCBhcyBpbnRlcm5hbDogaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0aXZlWC9yeGpzL2lzc3Vlcy82MjY5XG4gICAqL1xuICBuZXcgKG1lc3NhZ2U6IHN0cmluZywgeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogQWpheFJlcXVlc3QpOiBBamF4RXJyb3I7XG59XG5cbi8qKlxuICogVGhyb3duIHdoZW4gYW4gZXJyb3Igb2NjdXJzIGR1cmluZyBhbiBBSkFYIHJlcXVlc3QuXG4gKiBUaGlzIGlzIG9ubHkgZXhwb3J0ZWQgYmVjYXVzZSBpdCBpcyB1c2VmdWwgZm9yIGNoZWNraW5nIHRvIHNlZSBpZiBhbiBlcnJvclxuICogaXMgYW4gYGluc3RhbmNlb2YgQWpheEVycm9yYC4gRE8gTk9UIGNyZWF0ZSBuZXcgaW5zdGFuY2VzIG9mIGBBamF4RXJyb3JgIHdpdGhcbiAqIHRoZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAc2VlIHtAbGluayBhamF4fVxuICovXG5leHBvcnQgY29uc3QgQWpheEVycm9yOiBBamF4RXJyb3JDdG9yID0gY3JlYXRlRXJyb3JDbGFzcyhcbiAgKF9zdXBlcikgPT5cbiAgICBmdW5jdGlvbiBBamF4RXJyb3JJbXBsKHRoaXM6IGFueSwgbWVzc2FnZTogc3RyaW5nLCB4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBBamF4UmVxdWVzdCkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgIHRoaXMubmFtZSA9ICdBamF4RXJyb3InO1xuICAgICAgdGhpcy54aHIgPSB4aHI7XG4gICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgdGhpcy5zdGF0dXMgPSB4aHIuc3RhdHVzO1xuICAgICAgdGhpcy5yZXNwb25zZVR5cGUgPSB4aHIucmVzcG9uc2VUeXBlO1xuICAgICAgbGV0IHJlc3BvbnNlOiBhbnk7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGNhbiB0aHJvdyBpbiBJRSwgYmVjYXVzZSB3ZSBoYXZlIHRvIGRvIGEgSlNPTi5wYXJzZSBvZlxuICAgICAgICAvLyB0aGUgcmVzcG9uc2UgaW4gc29tZSBjYXNlcyB0byBnZXQgdGhlIGV4cGVjdGVkIHJlc3BvbnNlIHByb3BlcnR5LlxuICAgICAgICByZXNwb25zZSA9IGdldFhIUlJlc3BvbnNlKHhocik7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgfVxuICAgICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgIH1cbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWpheFRpbWVvdXRFcnJvciBleHRlbmRzIEFqYXhFcnJvciB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEFqYXhUaW1lb3V0RXJyb3JDdG9yIHtcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIEludGVybmFsIGltcGxlbWVudGF0aW9uIGRldGFpbC4gRG8gbm90IGNvbnN0cnVjdCBlcnJvciBpbnN0YW5jZXMuXG4gICAqIENhbm5vdCBiZSB0YWdnZWQgYXMgaW50ZXJuYWw6IGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdGl2ZVgvcnhqcy9pc3N1ZXMvNjI2OVxuICAgKi9cbiAgbmV3ICh4aHI6IFhNTEh0dHBSZXF1ZXN0LCByZXF1ZXN0OiBBamF4UmVxdWVzdCk6IEFqYXhUaW1lb3V0RXJyb3I7XG59XG5cbi8qKlxuICogVGhyb3duIHdoZW4gYW4gQUpBWCByZXF1ZXN0IHRpbWVzIG91dC4gTm90IHRvIGJlIGNvbmZ1c2VkIHdpdGgge0BsaW5rIFRpbWVvdXRFcnJvcn0uXG4gKlxuICogVGhpcyBpcyBleHBvcnRlZCBvbmx5IGJlY2F1c2UgaXQgaXMgdXNlZnVsIGZvciBjaGVja2luZyB0byBzZWUgaWYgZXJyb3JzIGFyZSBhblxuICogYGluc3RhbmNlb2YgQWpheFRpbWVvdXRFcnJvcmAuIERPIE5PVCB1c2UgdGhlIGNvbnN0cnVjdG9yIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZlxuICogdGhpcyB0eXBlLlxuICpcbiAqIEBzZWUge0BsaW5rIGFqYXh9XG4gKi9cbmV4cG9ydCBjb25zdCBBamF4VGltZW91dEVycm9yOiBBamF4VGltZW91dEVycm9yQ3RvciA9ICgoKSA9PiB7XG4gIGZ1bmN0aW9uIEFqYXhUaW1lb3V0RXJyb3JJbXBsKHRoaXM6IGFueSwgeGhyOiBYTUxIdHRwUmVxdWVzdCwgcmVxdWVzdDogQWpheFJlcXVlc3QpIHtcbiAgICBBamF4RXJyb3IuY2FsbCh0aGlzLCAnYWpheCB0aW1lb3V0JywgeGhyLCByZXF1ZXN0KTtcbiAgICB0aGlzLm5hbWUgPSAnQWpheFRpbWVvdXRFcnJvcic7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgQWpheFRpbWVvdXRFcnJvckltcGwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShBamF4RXJyb3IucHJvdG90eXBlKTtcbiAgcmV0dXJuIEFqYXhUaW1lb3V0RXJyb3JJbXBsO1xufSkoKSBhcyBhbnk7XG4iXX0=
