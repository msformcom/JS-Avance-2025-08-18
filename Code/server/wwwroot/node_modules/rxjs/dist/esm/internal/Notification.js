import{EMPTY}from"./observable/empty";import{of}from"./observable/of";import{throwError}from"./observable/throwError";import{isFunction}from"./util/isFunction";var NotificationKind;(i=>{i.NEXT="N",i.ERROR="E",i.COMPLETE="C"})(NotificationKind=NotificationKind||{});class Notification{constructor(i,t,o){this.kind=i,this.value=t,this.error=o,this.hasValue="N"===i}observe(i){return observeNotification(this,i)}do(i,t,o){var{kind:r,value:e,error:n}=this;return"N"===r?null==i?void 0:i(e):"E"===r?null==t?void 0:t(n):null==o?void 0:o()}accept(i,t,o){var r;return isFunction(null==(r=i)?void 0:r.next)?this.observe(i):this.do(i,t,o)}toObservable(){let{kind:i,value:t,error:o}=this;var r="N"===i?of(t):"E"===i?throwError(()=>o):"C"===i?EMPTY:0;if(r)return r;throw new TypeError("Unexpected notification kind "+i)}static createNext(i){return new Notification("N",i)}static createError(i){return new Notification("E",void 0,i)}static createComplete(){return Notification.completeNotification}}function observeNotification(i,t){var o,{kind:i,value:r,error:e}=i;if("string"!=typeof i)throw new TypeError('Invalid notification, missing "kind"');"N"===i?null!=(o=t.next)&&o.call(t,r):"E"===i?null!=(o=t.error)&&o.call(t,e):null!=(r=t.complete)&&r.call(t)}Notification.completeNotification=new Notification("C");export{NotificationKind,Notification,observeNotification};