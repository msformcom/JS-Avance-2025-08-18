import{asyncScheduler}from"../scheduler/async";import{isValidDate}from"../util/isDate";import{operate}from"../util/lift";import{innerFrom}from"../observable/innerFrom";import{createErrorClass}from"../util/createErrorClass";import{createOperatorSubscriber}from"./OperatorSubscriber";import{executeSchedule}from"../util/executeSchedule";let TimeoutError=createErrorClass(e=>function(r=null){e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=r});function timeout(r,e){let{first:s,each:n,with:c=timeoutErrorFactory,scheduler:a=null!=e?e:asyncScheduler,meta:m=null}=isValidDate(r)?{first:r}:"number"==typeof r?{each:r}:r;if(null==s&&null==n)throw new TypeError("No timeout provided.");return operate((r,e)=>{let t,o,u=null,i=0,l=r=>{o=executeSchedule(e,a,()=>{try{t.unsubscribe(),innerFrom(c({meta:m,lastValue:u,seen:i})).subscribe(e)}catch(r){e.error(r)}},r)};t=r.subscribe(createOperatorSubscriber(e,r=>{null!=o&&o.unsubscribe(),i++,e.next(u=r),0<n&&l(n)},void 0,void 0,()=>{null!=o&&o.closed||null!=o&&o.unsubscribe(),u=null})),i||l(null!=s?"number"==typeof s?s:+s-a.now():n)})}function timeoutErrorFactory(r){throw new TimeoutError(r)}export{TimeoutError,timeout};