import{__asyncValues,__awaiter}from"tslib";import{isArrayLike}from"../util/isArrayLike";import{isPromise}from"../util/isPromise";import{Observable}from"../Observable";import{isInteropObservable}from"../util/isInteropObservable";import{isAsyncIterable}from"../util/isAsyncIterable";import{createInvalidObservableTypeError}from"../util/throwUnobservableError";import{isIterable}from"../util/isIterable";import{isReadableStreamLike,readableStreamLikeToAsyncGenerator}from"../util/isReadableStreamLike";import{isFunction}from"../util/isFunction";import{reportUnhandledError}from"../util/reportUnhandledError";import{observable as Symbol_observable}from"../symbol/observable";function innerFrom(r){if(r instanceof Observable)return r;if(null!=r){if(isInteropObservable(r))return fromInteropObservable(r);if(isArrayLike(r))return fromArrayLike(r);if(isPromise(r))return fromPromise(r);if(isAsyncIterable(r))return fromAsyncIterable(r);if(isIterable(r))return fromIterable(r);if(isReadableStreamLike(r))return fromReadableStreamLike(r)}throw createInvalidObservableTypeError(r)}function fromInteropObservable(o){return new Observable(r=>{var e=o[Symbol_observable]();if(isFunction(e.subscribe))return e.subscribe(r);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}function fromArrayLike(o){return new Observable(e=>{for(let r=0;r<o.length&&!e.closed;r++)e.next(o[r]);e.complete()})}function fromPromise(r){return new Observable(e=>{r.then(r=>{e.closed||(e.next(r),e.complete())},r=>e.error(r)).then(null,reportUnhandledError)})}function fromIterable(o){return new Observable(r=>{for(var e of o)if(r.next(e),r.closed)return;r.complete()})}function fromAsyncIterable(r){return new Observable(e=>{process(r,e).catch(r=>e.error(r))})}function fromReadableStreamLike(r){return fromAsyncIterable(readableStreamLikeToAsyncGenerator(r))}function process(e,o){var t,i,n,a;return __awaiter(this,void 0,void 0,function*(){try{for(t=__asyncValues(e);!(i=yield t.next()).done;){var r=i.value;if(o.next(r),o.closed)return}}catch(r){n={error:r}}finally{try{i&&!i.done&&(a=t.return)&&(yield a.call(t))}finally{if(n)throw n.error}}o.complete()})}export{innerFrom,fromInteropObservable,fromArrayLike,fromPromise,fromIterable,fromAsyncIterable,fromReadableStreamLike};