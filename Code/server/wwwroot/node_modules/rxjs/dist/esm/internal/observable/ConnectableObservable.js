import{Observable}from"../Observable";import{Subscription}from"../Subscription";import{refCount as higherOrderRefCount}from"../operators/refCount";import{createOperatorSubscriber}from"../operators/OperatorSubscriber";import{hasLift}from"../util/lift";class ConnectableObservable extends Observable{constructor(t,e){super(),this.source=t,this.subjectFactory=e,this._subject=null,this._refCount=0,this._connection=null,hasLift(t)&&(this.lift=t.lift)}_subscribe(t){return this.getSubject().subscribe(t)}getSubject(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject}_teardown(){this._refCount=0;var t=this._connection;(this._subject=this._connection=null)!=t&&t.unsubscribe()}connect(){let t=this._connection;if(!t){t=this._connection=new Subscription;let e=this.getSubject();t.add(this.source.subscribe(createOperatorSubscriber(e,void 0,()=>{this._teardown(),e.complete()},t=>{this._teardown(),e.error(t)},()=>this._teardown()))),t.closed&&(this._connection=null,t=Subscription.EMPTY)}return t}refCount(){return higherOrderRefCount()(this)}}export{ConnectableObservable};