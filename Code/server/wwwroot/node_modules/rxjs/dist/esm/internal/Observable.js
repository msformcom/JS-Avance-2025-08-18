import{SafeSubscriber,Subscriber}from"./Subscriber";import{isSubscription}from"./Subscription";import{observable as Symbol_observable}from"./symbol/observable";import{pipeFromArray}from"./util/pipe";import{config}from"./config";import{isFunction}from"./util/isFunction";import{errorContext}from"./util/errorContext";class Observable{constructor(r){r&&(this._subscribe=r)}lift(r){var e=new Observable;return e.source=this,e.operator=r,e}subscribe(r,e,i){let s=isSubscriber(r)?r:new SafeSubscriber(r,e,i);return errorContext(()=>{var{operator:r,source:e}=this;s.add(r?r.call(s,e):e?this._subscribe(s):this._trySubscribe(s))}),s}_trySubscribe(e){try{return this._subscribe(e)}catch(r){e.error(r)}}forEach(s,r){return new(r=getPromiseCtor(r))((r,e)=>{let i=new SafeSubscriber({next:r=>{try{s(r)}catch(r){e(r),i.unsubscribe()}},error:e,complete:r});this.subscribe(i)})}_subscribe(r){var e;return null==(e=this.source)?void 0:e.subscribe(r)}[Symbol_observable](){return this}pipe(...r){return pipeFromArray(r)(this)}toPromise(r){return new(r=getPromiseCtor(r))((r,e)=>{let i;this.subscribe(r=>i=r,r=>e(r),()=>r(i))})}}function getPromiseCtor(r){return null!=(r=null!=r?r:config.Promise)?r:Promise}function isObserver(r){return r&&isFunction(r.next)&&isFunction(r.error)&&isFunction(r.complete)}function isSubscriber(r){return r&&r instanceof Subscriber||isObserver(r)&&isSubscription(r)}Observable.create=r=>new Observable(r);export{Observable};